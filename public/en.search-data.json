{"/about/index.zh/":{"data":{"":"","鸣谢#鸣谢":"Hextra 是一款简洁、快速、灵活的主题，适用于构建现代化静态站点。Hextra 特别适用于文档网站，但也可用于构建博客、个人网站等各种类型的网站。\nHugo 和 Jekyll 类似，是一个静态网站生成器。但与其他生成器不同，Hugo 只有单个可执行文件，这使得它可以轻松地在各种平台上安装和运行。Hugo 的运行速度非常快且可靠性高，能够在几毫秒内渲染数千页的网站。\nHextra 被设计为轻量级，具有最小化的内存占用。使用 Hextra 无需安装繁杂的依赖，比如 Node.js；相反，你只需要一个简单的 YAML 配置文件和 Markdown 内容。因此，我们可以专注于内容而非在配置环境上浪费精力。\n鸣谢\rPython-UIAutomation-for-Windows "},"title":"About"},"/agreement/":{"data":{"隐私政策#隐私政策":"最后更新日期：2025年05月23日\n感谢您使用 wxauto(x)（以下简称“本项目”）。为明确用户责任，特制定本用户协议（以下简称“协议”）。请在使用前仔细阅读并同意以下条款。您使用本项目即视为您已接受并同意遵守本协议。\n使用许可及限制\n合法用途 用户应仅将本项目用于合法用途，包括但不限于：\n个人学习和研究。\n在不违反适用法律法规及第三方协议（如微信用户协议）的情况下个人使用。\n禁止行为 不得私自删除该协议中任何内容。 用户不得将本项目用于以下用途，包括但不限于：\n不得使用本项目开发、分发或使用任何违反法律法规的工具或服务。\n不得使用本项目开发、分发或使用任何违反第三方平台规则（如微信用户协议）的工具或服务。\n不得使用本项目从事任何危害他人权益、平台安全或公共利益的行为。\n不得将本项目用于商业用途，包括但不限于开发、销售或以任何方式直接或间接获利的行为。\n不得将wxautox的源代码、修改版本或任何与本项目相关的内容发布至公共平台，也不得通过任何形式进行公开传播或分享。\n风险与责任 用户在使用本项目时，须自行确保其行为的合法性及合规性。 任何因使用本项目而产生的法律风险、责任及后果，由用户自行承担。用户应确保其使用行为不违反任何适用的法律法规及相关协议，且不侵犯第三方的权益。\n隐私政策本项目尊重并保护用户隐私，项目使用过程中，不会收集、使用、传输、披露用户的任何数据。PlusV2版本的授权过程仅传输由用户硬件码生成的哈希值与授权服务器进行授权动作，不涉及用户本地数据传输。"},"title":"用户协议与隐私政策"},"/docs/":{"data":{"":"探索以下部分，了解如何使用 wxauto：\n环境配置和安装\r配置\rMarkdown\r语法高亮\rLaTeX\r图表\r短代码\r部署站点"},"title":"wxauto文档"},"/docs/class/chat/":{"data":{"":"","#":"Chat 类方法\r获取聊天窗口信息 ChatInfo\rinfo = wx.ChatInfo()\r返回值：\n类型：dict 描述：聊天窗口信息 ✨@所有人 AtAll\rgroup = '工作群' content = \"\"\" 通知： 下午xxxx xxxx \"\"\" wx.AtAll(content, group)\rmsg (str): 发送的消息\n​ who (str, optional): 发送给谁. Defaults to None.\n​ exact (bool, optional): 是否精确匹配. Defaults to False.\n参数：\n参数 类型 默认值 描述 msg str None 发送的消息 who str None 发送给谁 exact bool False 是否精确匹配 返回值：\n类型：WxResponse 描述：是否发送成功 发送消息 SendMsg\rwx.SendMsg(msg=\"你好\", who=\"张三\", clear=True, at=\"李四\", exact=False)\r参数：\n参数 类型 默认值 描述 msg str 必填 消息内容 who str None 发送对象，不指定则发送给当前聊天对象，当子窗口时，该参数无效 clear bool True 发送后是否清空编辑框 at Union[str, List[str]] None @对象，不指定则不@任何人 exact bool False 搜索who好友时是否精确匹配，当子窗口时，该参数无效 返回值：\n类型：WxResponse 描述：是否发送成功 ✨发送文本消息（打字机模式）SendTypingText\rwx.SendTypingText(msg=\"你好\", who=\"张三\", clear=True, exact=False)\r参数：\n参数 类型 默认值 描述 msg str 必填 要发送的文本消息 who str None 发送对象，不指定则发送给当前聊天对象，当子窗口时，该参数无效 clear bool True 是否清除原本的内容 exact bool False 搜索who好友时是否精确匹配，当子窗口时，该参数无效 返回值：\n类型：WxResponse 描述：是否发送成功 示例：\n# 换行及@功能 wx.SendTypingText('各位下午好\\n{@张三}负责xxx\\n{@李四}负责xxxx', who='工作群')\r发送文件 SendFiles\rwx.SendFiles(filepath=\"C:/文件.txt\", who=\"张三\", exact=False)\r参数：\n参数 类型 默认值 描述 filepath str|list 必填 要复制文件的绝对路径 who str None 发送对象，不指定则发送给当前聊天对象，当子窗口时，该参数无效 exact bool False 搜索who好友时是否精确匹配，当子窗口时，该参数无效 返回值：\n类型：WxResponse 描述：是否发送成功 ✨发送自定义表情 SendEmotion\rwx.SendEmotion(emotion_index=0, who=\"张三\", exact=False)\r参数：\n参数 类型 默认值 描述 emotion_index str 必填 表情索引，从0开始 who str None 发送对象，不指定则发送给当前聊天对象，当子窗口时，该参数无效 exact bool False 搜索who好友时是否精确匹配，当子窗口时，该参数无效 返回值：\n类型：WxResponse 描述：是否发送成功 获取当前聊天窗口的所有消息 GetAllMessage\rmessages = wx.GetAllMessage()\r返回值：\n类型：List[Message] 描述：当前聊天窗口的所有消息 获取当前聊天窗口的新消息 GetNewMessage\rnew_messages = wx.GetNewMessage()\r返回值：\n类型：List[Message] 描述：当前聊天窗口的新消息 ✨添加群成员 AddGroupMembers\rwx.AddGroupMembers(group=\"技术交流群\", members=[\"张三\", \"李四\"], reason=\"交流技术\")\r参数：\n参数 类型 默认值 描述 group str None 群名 members Union[str, List[str]] None 成员名或成员名列表 reason str None 申请理由，当群主开启验证时需要，不填写则取消申请 返回值：\n类型：WxResponse 描述：是否添加成功 ✨获取当前聊天群成员 GetGroupMembers\rmembers = wx.GetGroupMembers()\r返回值：\n类型：List[str] 描述：当前聊天群成员列表 "},"title":"Chat类"},"/docs/class/wechat/":{"data":{"":"","#":"WeChat 类方法\r初始化参数\r参数 类型 默认值 描述 nickname str None 微信昵称，用于定位特定的微信窗口 debug bool False 是否开启调试模式 from wxautox import WeChat wx = WeChat()\r获取当前会话列表 GetSession\rsessions = wx.GetSession() for session in sessions: print(session.info)\r返回值：\n类型：List[SessionElement] 描述：当前会话列表 ✨发送链接卡片 SendUrlCard\rwx.SendUrlCard(url=\"https://example.com\", friends=\"张三\", timeout=10)\r参数：\n参数 类型 默认值 描述 url str 必填 链接地址 friends Union[str, List[str]] None 发送对象，可以是单个用户名或用户名列表 timeout int 10 等待时间（秒） 返回值：\n类型：WxResponse 描述：发送结果 打开聊天窗口 ChatWith\rwx.ChatWith(who=\"张三\", exact=False)\r参数：\n参数 类型 默认值 描述 who str 必填 要聊天的对象 exact bool False 搜索好友时是否精确匹配 返回值：无\n获取子窗口实例 GetSubWindow\rchat = wx.GetSubWindow(nickname=\"张三\")\r参数：\n参数 类型 默认值 描述 nickname str 必填 要获取的子窗口的昵称 返回值：\n类型：Chat 描述：子窗口实例 获取所有子窗口实例 GetAllSubWindow\rchats = wx.GetAllSubWindow()\r返回值：\n类型：List[Chat] 描述：所有子窗口实例的列表 添加监听聊天窗口 AddListenChat\rdef on_message(msg, chatname): print(f\"收到来自 {chatname} 的消息: {msg.content}\") wx.AddListenChat(nickname=\"张三\", callback=on_message)\r参数：\n参数 类型 默认值 描述 nickname str 必填 要监听的聊天对象 callback Callable[[Message, str], None] 必填 回调函数，参数为(Message对象, 聊天名称) 返回值：\n类型：WxResponse 描述：执行结果，成功时包含监听名称 移除监听聊天 RemoveListenChat\rwx.RemoveListenChat(nickname=\"张三\")\r参数：\n参数 类型 默认值 描述 nickname str 必填 要移除的监听聊天对象 返回值：\n类型：WxResponse 描述：执行结果 ✨进入朋友圈 Moments\rmoments = wx.Moments(timeout=3)\r参数：\n参数 类型 默认值 描述 timeout int 3 等待时间（秒） 返回值：\n类型：MomentsWnd 描述：朋友圈窗口实例 获取下一个新消息 GetNextNewMessage\rmessages = wx.GetNextNewMessage(filter_mute=False)\r参数：\n参数 类型 默认值 描述 filter_mute bool False 是否过滤掉免打扰消息 返回值：\n类型：Dict[str, List[Message] 描述：消息列表，键为聊天名称，值为消息列表 ✨获取新的好友申请列表 GetNewFriends\rnewfriends = wx.GetNewFriends(acceptable=True)\r参数：\n参数 类型 默认值 描述 acceptable bool True 是否过滤掉已接受的好友申请 返回值：\n类型：List[NewFriendElement] 描述：新的好友申请列表 示例：\nnewfriends = wx.GetNewFriends(acceptable=True) tags = ['标签1', '标签2'] for friend in newfriends: remark = f'备注{friend.name}' friend.Accept(remark=remark, tags=tags) # 接受好友请求，并设置备注和标签\r✨添加新的好友 AddNewFriend\rwx.AddNewFriend(keywords=\"张三\", addmsg=\"我是小明\", remark=\"老张\", tags=[\"同学\"], permission=\"朋友圈\", timeout=5)\r参数：\n参数 类型 默认值 描述 keywords str 必填 搜索关键词，可以是昵称、微信号、手机号等 addmsg str None 添加好友时的附加消息 remark str None 添加好友后的备注 tags List[str] None 添加好友后的标签 permission Literal[‘朋友圈’, ‘仅聊天’] ‘朋友圈’ 添加好友后的权限 timeout int 5 搜索好友的超时时间（秒） 返回值：\n类型：WxResponse 描述：添加好友的结果 切换到聊天页面 SwitchToChat\rwx.SwitchToChat()\r返回值：无\n切换到联系人页面 SwitchToContact\rwx.SwitchToContact()\r返回值：无"},"title":"WeChat类"},"/docs/concepts/":{"data":{"":"","chat#Chat":"","message-类#Message 类":"","wechat-类#WeChat 类":"","wxparam-类#WxParam 类":"Chat\rChat 类代表一个微信聊天窗口实例，提供了与聊天相关的操作方法，用于对微信聊天窗口进行各种操作，后续文档以变量名chat作为该类对象。\nWeChat 类\rWeChat 类是 wxautox 的主要入口点，它继承自 Chat 类和 Listener 类，代表微信主窗口实例，用于对微信主窗口进行各种操作，后续文档以变量名wx作为该类对象。\n初始化参数\r参数 类型 默认值 描述 nickname str None 微信昵称，用于定位特定的微信窗口 debug bool False 是否开启调试模式 wx = WeChat(nickname=\"张三\")\rMessage 类\rMessage类代表微信聊天中的消息，分为两个概念：\n消息内容类型（type）：文本消息、图片消息、文件消息、语音消息、卡片消息等等 消息来源类型（attr）：系统消息、时间消息、自己发送的消息、对方发来的消息 # 导入你想要的消息类型 from wxautox.msgs import ( Message, TextMessage, FriendMessage, FriendTextMessage, ... ) # 假设你获取到了一个消息对象 msg: Message = ... # 如果是对方发来的消息，则回复收到 if isinstance(msg, FriendMessage): msg.reply(\"收到\")\rtype↓ attr→ 自己的消息SelfMessage 对方的消息FriendMessage 文本消息TextMessage SelfTextMessage FriendTextMessage 引用消息QuoteMessage SelfQuoteMessage FriendQuoteMessage 语音消息VoiceMessage SelfVoiceMessage FriendVoiceMessage 图片消息ImageMessage SelfImageMessage FriendImageMessage 视频消息VideoMessage SelfVideoMessage FriendVideoMessage 文件消息FileMessage SelfFileMessage FriendFileMessage 位置消息LocationMessage SelfLocationMessage FriendLocationMessage 链接消息LinkMessage SelfLinkMessage FriendLinkMessage 表情消息EmotionMessage SelfEmotionMessage FriendEmotionMessage 合并消息MergeMessage SelfMergeMessage FriendMergeMessage 名片消息PersonalCardMessage SelfPersonalCardMessage FriendPersonalCardMessage 其他消息OtherMessage SelfOtherMessage FriendOtherMessage WxResponse 类\r该类用于该项目多个方法的返回值\n# 这里假设result为某个方法的WxResponse类型返回值 result: WxResponse = ... # 判断是否成功 if result: data = result['data'] # 成功，获取返回数据，大多数情况下为None else: print(result['message']) # 该方法调用失败，打印错误信息\rWxParam 类\rENABLE_FILE_LOGGER ( bool ) ：是否启用日志文件，默认True DEFAULT_SAVE_PATH ( str ) ：下载文件/图片默认保存路径，默认为当前工作目录下的wxautox文件下载文件夹 MESSAGE_HASH ( bool ) ：是否启用消息哈希值用于辅助判断消息，开启后会稍微影响性能，默认False DEFAULT_MESSAGE_XBIAS ( int ) ：头像到消息X偏移量，用于消息定位，点击消息等操作，默认51 FORCE_MESSAGE_XBIAS ( bool ) ：是否强制重新自动获取X偏移量，如果设置为True，则每次启动都会重新获取，默认False LISTEN_INTERVAL ( int ) ：监听消息时间间隔，单位秒，默认1 LISTENER_EXCUTOR_WORKERS ( int ) ：监听执行器线程池大小，根据自身需求和设备性能设置，默认4 SEARCH_CHAT_TIMEOUT ( int ) ：搜索聊天对象超时时间，单位秒，默认5 from wxautox import WxParam WxParam.LISTENER_EXCUTOR_WORKERS = 8 ...","wxresponse-类#WxResponse 类":""},"title":"核心类概念"},"/docs/install/":{"data":{"":"","一环境配置#一、环境配置":"","三测试运行#三、测试运行":"一、环境配置\r环境 版本 Python 3.9-3.12 OS Windows10+, Windows Server2016+ 微信 3.9.8+（不支持4.0） 二、安装\rpip install wxautox\r激活：\nwxautox -a [激活码]\r三、测试运行\rfrom wxautox import WeChat # 初始化微信实例 wx = WeChat() # 发送消息 wx.SendMsg(\"你好\", who=\"文件传输助手\") # 获取当前聊天窗口消息 msgs = wx.GetAllMessage() for msg in msgs: print('==' * 30) print(f\"{msg.sender}: {msg.content}\")","二安装#二、安装":""},"title":"环境配置和安装"},"/docs/start/":{"data":{"":"","快速开始#快速开始":"快速开始\rfrom wxautox import WeChat # 初始化微信实例 wx = WeChat() # 发送消息 wx.SendMsg(\"你好\", who=\"文件传输助手\") # 获取当前聊天窗口消息 msgs = wx.GetAllMessage() for msg in msgs: print('==' * 30) print(f\"{msg.sender}: {msg.content}\")"},"title":"快速开始"}}