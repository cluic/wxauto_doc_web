{"/about/":{"data":{"":"","鸣谢#鸣谢":"Hextra 是一款简洁、快速、灵活的主题，适用于构建现代化静态站点。Hextra 特别适用于文档网站，但也可用于构建博客、个人网站等各种类型的网站。\nHugo 和 Jekyll 类似，是一个静态网站生成器。但与其他生成器不同，Hugo 只有单个可执行文件，这使得它可以轻松地在各种平台上安装和运行。Hugo 的运行速度非常快且可靠性高，能够在几毫秒内渲染数千页的网站。\nHextra 被设计为轻量级，具有最小化的内存占用。使用 Hextra 无需安装繁杂的依赖，比如 Node.js；相反，你只需要一个简单的 YAML 配置文件和 Markdown 内容。因此，我们可以专注于内容而非在配置环境上浪费精力。\n鸣谢\rPython-UIAutomation-for-Windows "},"title":"关于"},"/agreement/":{"data":{"":"","#":"","隐私政策#隐私政策":"最后更新日期：2025年05月23日\n感谢您使用 wxauto(x)（以下简称“本项目”）。为明确用户责任，特制定本用户协议（以下简称“协议”）。请在使用前仔细阅读并同意以下条款。您使用本项目即视为您已接受并同意遵守本协议。\n使用许可及限制\n1. 合法用途\r用户应仅将本项目用于合法用途，包括但不限于：\n个人学习和研究。\n在不违反适用法律法规及第三方协议（如微信用户协议）的情况下个人使用。\n2. 禁止行为\r用户不得将本项目用于以下用途，包括但不限于：\n不得使用本项目开发、分发或使用任何违反法律法规的工具或服务。\n不得使用本项目开发、分发或使用任何违反第三方平台规则（如微信用户协议）的工具或服务。\n不得使用本项目从事任何危害他人权益、平台安全或公共利益的行为。\n不得将本项目用于商业用途，包括但不限于开发、销售或以任何方式直接或间接获利的行为。\n不得将wxautox的源代码、修改版本或任何与本项目相关的内容发布至公共平台，也不得通过任何形式进行公开传播或分享。\n3. 风险与责任\r用户在使用本项目时，须自行确保其行为的合法性及合规性。 任何因使用本项目而产生的法律风险、责任及后果，由用户自行承担。用户应确保其使用行为不违反任何适用的法律法规及相关协议，且不侵犯第三方的权益。\n隐私政策\r本项目尊重并保护用户隐私，项目使用过程中，不会收集、使用、传输、披露用户的任何数据。PlusV2版本的授权过程仅传输由用户硬件码生成的哈希值与授权服务器进行授权动作，不涉及用户本地数据传输。"},"title":"用户协议与隐私政策"},"/docs/":{"data":{"":"探索以下部分，了解如何使用 wxauto：\n环境配置和安装\r配置\rMarkdown\r语法高亮\rLaTeX\r图表\r短代码\r部署站点"},"title":"wxauto(x)文档"},"/docs/class/chat/":{"data":{"":"","chat-类属性#Chat 类属性":"","chat-类方法#Chat 类方法":"Chat 类属性\r聊天窗口类型 chat_type\r获取当前聊天窗口的类型，返回值为字符串，取值范围如下：\nfriend：好友 group：群聊 service：客服 official：公众号 chat_type = wx.chat_type\rChat 类方法\r显示窗口 Show\rwx.Show()\r获取聊天窗口信息 ChatInfo\rinfo = wx.ChatInfo()\r返回值：\n类型：dict 描述：聊天窗口信息 返回值示例： # 好友 {'chat_type': 'friend', 'chat_name': '张三'} # 群聊 {'group_member_count': 500, 'chat_type': 'group', 'chat_name': '工作群'} # 客服 {'company': '@肯德基', 'chat_type': 'service', 'chat_name': '店长xxx'} # 公众号 {'chat_type': 'official', 'chat_name': '肯德基'} ✨@所有人 AtAll\rgroup = '工作群' content = \"\"\" 通知： 下午xxxx xxxx \"\"\" wx.AtAll(content, group)\rmsg (str): 发送的消息\n​ who (str, optional): 发送给谁. Defaults to None.\n​ exact (bool, optional): 是否精确匹配. Defaults to False.\n参数：\n参数 类型 默认值 描述 msg str None 发送的消息 who str None 发送给谁 exact bool False 是否精确匹配 返回值：\n类型：WxResponse 描述：是否发送成功 发送消息 SendMsg\rwx.SendMsg(msg=\"你好\", who=\"张三\", clear=True, at=\"李四\", exact=False)\r参数：\n参数 类型 默认值 描述 msg str 必填 消息内容 who str None 发送对象，不指定则发送给当前聊天对象，当子窗口时，该参数无效 clear bool True 发送后是否清空编辑框 at Union[str, List[str]] None @对象，不指定则不@任何人 exact bool False 搜索who好友时是否精确匹配，当子窗口时，该参数无效 返回值：\n类型：WxResponse 描述：是否发送成功 ✨发送文本消息（打字机模式）SendTypingText\rwx.SendTypingText(msg=\"你好\", who=\"张三\", clear=True, exact=False)\r参数：\n参数 类型 默认值 描述 msg str 必填 要发送的文本消息 who str None 发送对象，不指定则发送给当前聊天对象，当子窗口时，该参数无效 clear bool True 是否清除原本的内容 exact bool False 搜索who好友时是否精确匹配，当子窗口时，该参数无效 返回值：\n类型：WxResponse 描述：是否发送成功 示例：\n# 换行及@功能 wx.SendTypingText('各位下午好\\n{@张三}负责xxx\\n{@李四}负责xxxx', who='工作群')\r发送文件 SendFiles\rwx.SendFiles(filepath=\"C:/文件.txt\", who=\"张三\", exact=False)\r参数：\n参数 类型 默认值 描述 filepath str|list 必填 要复制文件的绝对路径 who str None 发送对象，不指定则发送给当前聊天对象，当子窗口时，该参数无效 exact bool False 搜索who好友时是否精确匹配，当子窗口时，该参数无效 返回值：\n类型：WxResponse 描述：是否发送成功 ✨发送自定义表情 SendEmotion\rwx.SendEmotion(emotion_index=0, who=\"张三\", exact=False)\r参数：\n参数 类型 默认值 描述 emotion_index str 必填 表情索引，从0开始 who str None 发送对象，不指定则发送给当前聊天对象，当子窗口时，该参数无效 exact bool False 搜索who好友时是否精确匹配，当子窗口时，该参数无效 返回值：\n类型：WxResponse 描述：是否发送成功 获取当前聊天窗口的所有消息 GetAllMessage\rmessages = wx.GetAllMessage()\r返回值：\n类型：List[Message] 描述：当前聊天窗口的所有消息 加载当前窗口更多聊天记录 LoadMoreMessage\rwx.LoadMoreMessage()\r返回值：\n类型：WxResponse 描述：是否发送成功 获取当前聊天窗口的新消息 GetNewMessage\rnew_messages = wx.GetNewMessage()\r返回值：\n类型：List[Message] 描述：当前聊天窗口的新消息 ✨添加群成员 AddGroupMembers\rwx.AddGroupMembers(group=\"技术交流群\", members=[\"张三\", \"李四\"], reason=\"交流技术\")\r参数：\n参数 类型 默认值 描述 group str None 群名 members Union[str, List[str]] None 成员名或成员名列表 reason str None 申请理由，当群主开启验证时需要，不填写则取消申请 返回值：\n类型：WxResponse 描述：是否添加成功 ✨获取当前聊天群成员 GetGroupMembers\rmembers = wx.GetGroupMembers()\r返回值：\n类型：List[str] 描述：当前聊天群成员列表 ✨移除群成员 RemoveGroupMembers\rwx.RemoveGroupMembers(group=\"群名\", members=[\"成员名1\", \"成员名2\"])\r参数：\n参数 类型 默认值 描述 group str None 群名 members str None 成员名 返回值：\n类型：WxResponse 描述：是否移除成功 ✨修改好友备注名或标签 ManageFriend\rwx.ManageFriend(remark=\"新备注名\") wx.ManageFriend(tags=[\"标签1\", \"标签2\"])\r参数：\n参数 类型 默认值 描述 remark str None 备注名 tags List[str] None 标签列表 返回值：\n类型：WxResponse 描述：是否成功修改备注名或标签 ✨管理当前群聊 ManageGroup\rwx.ManageGroup(name=\"新群名\") wx.ManageGroup(remark=\"新备注名\") wx.ManageGroup(myname=\"新群昵称\") wx.ManageGroup(notice=\"新群公告\") wx.ManageGroup(quit=True) # 谨慎使用\r参数：\n参数 类型 默认值 描述 name str None 群名称 remark str None 备注名 myname str None 我的群昵称 notice str None 群公告 quit bool False 是否退出群，当该项为True时，其他参数无效 关闭窗口 Close\rwx.Close()"},"title":"Chat类"},"/docs/class/message/":{"data":{"":"","emotionmessage#EmotionMessage":"","filemessage#FileMessage":"","friendmessage#FriendMessage":"","humanmessage#HumanMessage":"","imagemessage#ImageMessage":"","linkmessage#LinkMessage":"","locationmessage#LocationMessage":"","mergemessage#MergeMessage":"","notemessage#NoteMessage":"","othermessage#OtherMessage":"消息类中，有两个固定属性：\nattr：消息属性，即消息的来源属性 system：系统消息 time：时间消息 tickle：拍一拍消息 self：自己发送的消息 friend：好友消息 other：其他消息 type：消息类型，即消息的内容属性 text：文本消息 quote：引用消息 voice：语音消息 image：图片消息 video：视频消息 file：文件消息 location：位置消息 link：链接消息 emotion：表情消息 merge：合并转发消息 personal_card：个人名片消息 other：其他消息 而self和friend又可以跟消息类型所组合，所以所有消息类别如下：\n自己发送的消息SelfMessage 对方发来的消息FriendMessage 文本消息TextMessage SelfTextMessage FriendTextMessage 引用消息QuoteMessage SelfQuoteMessage FriendQuoteMessage 语音消息VoiceMessage SelfVoiceMessage FriendVoiceMessage 图片消息ImageMessage SelfImageMessage FriendImageMessage 视频消息VideoMessage SelfVideoMessage FriendVideoMessage 文件消息FileMessage SelfFileMessage FriendFileMessage 位置消息LocationMessage SelfLocationMessage FriendLocationMessage 链接消息LinkMessage SelfLinkMessage FriendLinkMessage 表情消息EmotionMessage SelfEmotionMessage FriendEmotionMessage 合并消息MergeMessage SelfMergeMessage FriendMergeMessage 名片消息PersonalCardMessage SelfPersonalCardMessage FriendPersonalCardMessage 其他消息OtherMessage SelfOtherMessage FriendOtherMessage 简单的使用示例：\nfrom wxautox.msgs import * ... # 省略获取消息对象的过程 # 假设你获取到了一个消息对象 msg = ... # 当消息为好友消息时，回复收到 # 方法一： if msg.attr == 'friend': msg.reply('收到') # 方法二： if isinstance(msg, FriendMessage): msg.reply('收到')\rSystemMessage\r系统消息，没有特殊用法\n固定属性：\n属性名 类型 属性值 描述 attr str system 消息属性 TickleMessage\r拍一拍消息，继承自SystemMessage\n固定属性：\n属性名 类型 属性值 描述 attr str tickle 消息属性 特有属性：\n属性 类型 描述 tickle_list str 拍一拍消息列表 TimeMessage\r时间消息\n固定属性：\n属性名 类型 属性值 描述 attr str time 消息属性 特有属性：\n属性 类型 描述 time str 时间 YYYY-MM-DD HH:MM:SS HumanMessage\r人发送的消息，即自己或好友、群友发送的消息\n固定属性：\n属性名 类型 属性值 描述 attr str friend 消息属性 select_option\r右键该消息，弹出右键菜单，并选择指定选项\nmsg.select_option(\"复制\")\r返回值：\n类型：WxResponse 描述：操作结果 quote\r引用该消息，并回复\nmsg.quote(\"回复内容\")\r参数：\n参数名 类型 默认值 描述 text str 无 引用内容 at Union[List[str], str] 无 @用户列表 timeout int 3 超时时间，单位为秒 返回值：\n类型：WxResponse 描述：操作结果 forward\r转发该消息\nmsg.forward(\"转发对象名称\")\r参数：\n参数名 类型 默认值 描述 targets Union[List[str], str] 无 转发对象名称 timeout int 3 超时时间，单位为秒 返回值：\n类型：WxResponse 描述：操作结果 tickle\r拍一拍该消息发送人\nmsg.tickle()\r返回值：\n类型：WxResponse 描述：操作结果 FriendMessage\r好友、群友发送的消息，即聊天页面中，左侧人员发送的消息。继承自HumanMessage\nsender_info\r获取发送人信息\nmsg.sender_info()\r返回值：\n类型：Dict[str, str] at\r@该消息发送人\nmsg.at('xxxxxx')\r参数：\n参数名 类型 默认值 描述 content str 必填 要发送的内容 quote bool False 是否引用该消息 返回值：\n类型：WxResponse 描述：操作结果 add_friend\r添加该消息的发送人为好友\nmsg.add_friend()\r参数：\n参数名 类型 默认值 描述 addmsg str None 添加好友时的附加消息，默认为None remark str None 添加好友后的备注，默认为None tags list None 添加好友后的标签，默认为None permission Literal[‘朋友圈’, ‘仅聊天’] ‘朋友圈’ 添加好友后的权限，默认为’朋友圈’ timeout int 3 搜索好友的超时时间，默认为3秒 返回值：\n类型：WxResponse 描述：操作结果 SelfMessage\r自己发送的消息，即聊天页面中，右侧自己发送的消息。继承自HumanMessage\n固定属性：\n属性名 类型 属性值 描述 attr str self 消息属性 TextMessage\r文本消息。继承自HumanMessage\n固定属性：\n属性名 类型 属性值 描述 type str text 消息属性 QuoteMessage\r引用消息。继承自HumanMessage\n固定属性：\n属性名 类型 属性值 描述 type str quote 消息属性 特有属性：\n属性名 类型 属性值 描述 quote_content str 引用消息内容 引用消息内容 ImageMessage\r图片消息。继承自HumanMessage\n固定属性：\n属性名 类型 属性值 描述 type str image 消息属性 download\r下载图片，返回图片路径\nmsg.download()\r参数：\n参数名 类型 默认值 描述 dir_path Union[str, Path] None 下载图片的目录，不填则默认WxParam.DEFAULT_SAVE_PATH timeout int 10 下载超时时间 返回值：\nPath: 图片路径，成功时返回该类型 WxResponse: 下载结果，失败时返回该类型 VideoMessage\r视频消息。继承自HumanMessage\n固定属性：\n属性名 类型 属性值 描述 type str video 消息属性 download\r下载视频，返回视频路径\nmsg.download()\r参数：\n参数名 类型 默认值 描述 dir_path Union[str, Path] None 下载视频的目录，不填则默认WxParam.DEFAULT_SAVE_PATH timeout int 10 下载超时时间 返回值：\nPath: 视频路径，成功时返回该类型 WxResponse: 下载结果，失败时返回该类型 VoiceMessage\r视频消息。继承自HumanMessage\n固定属性：\n属性名 类型 属性值 描述 type str video 消息属性 to_text\r将语音消息转换为文本，返回文本内容\nmsg.to_text()\rFileMessage\r文件消息。继承自HumanMessage\n固定属性：\n属性名 类型 属性值 描述 type str file 消息属性 download\r下载文件，返回文件路径\nmsg.download()\r参数：\n参数名 类型 默认值 描述 dir_path Union[str, Path] None 下载文件的目录，不填则默认WxParam.DEFAULT_SAVE_PATH timeout int 10 下载超时时间 返回值：\nPath: 文件路径，成功时返回该类型 WxResponse: 下载结果，失败时返回该类型 LocationMessage\r位置消息。继承自HumanMessage\n固定属性：\n属性名 类型 属性值 描述 type str location 消息属性 特有属性：\n属性名 类型 属性值 描述 address str 地址信息 该消息卡片的地址信息 LinkMessage\r链接消息。继承自HumanMessage\n固定属性：\n属性名 类型 属性值 描述 type str link 消息属性 get_url\r获取链接地址\nmsg.get_url()\r参数名 类型 默认值 描述 timeout int 10 下载超时时间 返回值：\nstr: 链接地址 EmotionMessage\r表情消息。继承自HumanMessage\n固定属性：\n属性名 类型 属性值 描述 type str emotion 消息属性 MergeMessage\r合并消息。继承自HumanMessage\n固定属性：\n属性名 类型 属性值 描述 type str merge 消息属性 get_messages\r获取合并消息中的所有消息\nmsg.get_messages()\r返回值：\nList[str]: 合并消息中的所有消息 PersonalCardMessage\r名片消息。继承自HumanMessage\n固定属性：\n属性名 类型 属性值 描述 type str personal_card 消息属性 add_friend\r添加好友\nmsg.add_friend()\r参数名 类型 默认值 描述 addmsg str None 添加好友时的附加消息 remark str None 添加好友后的备注 tags List[str] None 添加好友后的标签 permission Literal[‘朋友圈’, ‘仅聊天’] ‘朋友圈’ 添加好友后的权限 timeout int 3 搜索好友的超时时间 返回值：\nWxResponse: 是否添加成功 NoteMessage\r笔记消息。继承自HumanMessage\n固定属性：\n属性名 类型 属性值 描述 type str note 消息属性 save_files\r保存笔记中的文件\nmsg.save_files()\r参数名 类型 默认值 描述 dir_path Union[str, Path] None 保存路径 返回值：\nWxResponse: 是否保存成功，若成功则data为保存的文件路径列表 to_markdown\r将笔记转换为Markdown格式\nmsg.to_markdown()\r参数名 类型 默认值 描述 dir_path Union[str, Path] None 保存路径 返回值：\nPath: markdown文件路径 OtherMessage\r其他暂未支持解析的消息类型","personalcardmessage#PersonalCardMessage":"","quotemessage#QuoteMessage":"","selfmessage#SelfMessage":"","systemmessage#SystemMessage":"","textmessage#TextMessage":"","ticklemessage#TickleMessage":"","timemessage#TimeMessage":"","videomessage#VideoMessage":"","voicemessage#VoiceMessage":""},"title":"Message类"},"/docs/class/other/":{"data":{"":"","newfriendelement#NewFriendElement":"WxResponse\r该类用于该项目多个方法的返回值\n# 这里假设result为某个方法的WxResponse类型返回值 result: WxResponse = ... # 判断是否成功 if result: data = result['data'] # 成功，获取返回数据，大多数情况下为None else: print(result['message']) # 该方法调用失败，打印错误信息\rWxParam\r该类用于该项目的一些参数，在获取WeChat实例前，可以通过修改该类的属性来修改默认参数\n属性 类型 默认值 描述 ENABLE_FILE_LOGGER bool True 是否启用日志文件 DEFAULT_SAVE_PATH str ./wxautox 下载文件/图片默认保存路径 MESSAGE_HASH bool False 是否启用消息哈希值用于辅助判断消息，开启后会稍微影响性能 DEFAULT_MESSAGE_XBIAS int 51 头像到消息X偏移量，用于消息定位，点击消息等操作 FORCE_MESSAGE_XBIAS bool False 是否强制重新自动获取X偏移量，如果设置为True，则每次启动都会重新获取 LISTEN_INTERVAL int 1 监听消息时间间隔，单位秒 LISTENER_EXCUTOR_WORKERS int 4 监听执行器线程池大小，根据自身需求和设备性能设置 SEARCH_CHAT_TIMEOUT int 5 搜索聊天对象超时时间，单位秒 示例：\nfrom wxautox import WxParam # 设置8个监听线程 WxParam.LISTENER_EXCUTOR_WORKERS = 8 ...\rSessionElement\r属性 类型 描述（以上图为例） name str 会话名（wxauto三群） time str 时间（2025-05-14 14:41） content str 消息内容（[10条]天道酬勤：这..） ismute bool 是否消息免打扰（True） isnew bool 是否有新消息（True） new_count int 新消息数量（10） info Dict[str, Any] 会话信息（包含了上述所有属性的dict） from wxauto import WeChat wx = WeChat() sessions = wx.GetSession() session = sessions[0] # 获取第一个会话\rclick\r点击会话，即切换到这个聊天窗口\n参数：无\n返回值：无\n示例：\nsession.click()\rdouble_click\r双击会话，即将这个聊天窗口独立出去\n参数：无\n返回值：无\n示例：\nsession.double_click()\rdelete\r删除会话\n⚠️\r请谨慎调用该方法，该方法会删除该会话的所有聊天记录，无法恢复！！\n请谨慎调用该方法，该方法会删除该会话的所有聊天记录，无法恢复！！\n请谨慎调用该方法，该方法会删除该会话的所有聊天记录，无法恢复！！\r参数：无\n返回值：WxResponse\n示例：\nsession.delete()\rhide\r隐藏会话\n参数：无\n返回值：WxResponse\n示例：\nsession.hide()\rselect_option\r选择会话选项，即右键点击会话，然后选择某个选项\n参数：\n参数名 类型 说明 option str 选项名称，例如“置顶”、“标为未读”等 返回值：WxResponse\nNewFriendElement\r属性 类型 描述（以上图为例） name str 对方名（诸葛孔明） msg str 申请信息（wxautox） acceptable bool 是否可接受（True） accept\r同意添加好友\n参数：\n参数名 类型 默认值 说明 remark str None 备注 tags list None 标签 permission str ‘朋友圈’ 朋友圈权限，可选值：‘全部’、‘仅聊天’ delete\r删除好友申请\n参数：无\nreply\r回复好友申请\n参数：\n参数名 类型 默认值 说明 text str 必填 回复信息 get_account\r获取申请添加的好友的账号信息\nℹ️\r该方法仅接受好友申请后，已经成为好友，才能获取到对方账号信息\r参数：\n参数名 类型 默认值 说明 wait int 5 等待时间 返回值：str","sessionelement#SessionElement":"","wxparam#WxParam":"","wxresponse#WxResponse":""},"title":"其他类"},"/docs/class/wechat/":{"data":{"":"","wechat-类方法#WeChat 类方法":"\r🌐\r提示：\nWeChat 类继承了 Chat类 的所有方法，有关聊天框内的操作，请参考 Chat类 的文档。\rWeChat 类方法\r概念\r为确保您可以理解该文档的一些内容，这里先简单介绍一下 wxauto(x) 的设计思路，如下图所示，wxauto(x) 将微信窗口拆解为三部分：\n导航栏（NavigationBox）：下图蓝色框内部分 会话列表（SessionBox）：下图绿色框内部分 会话列表项（SessionElement）：会话列表中每一个会话的元素，如好友、群聊、公众号等 聊天框（Chat）：下图红色框内部分 初始化参数\r参数 类型 默认值 描述 nickname str None 微信昵称，用于定位特定的微信窗口 debug bool False 是否开启调试模式 from wxautox import WeChat wx = WeChat()\r获取当前会话列表 GetSession\rsessions = wx.GetSession() for session in sessions: print(session.info)\r返回值：\n类型：List[SessionElement] 描述：当前会话列表 ✨发送链接卡片 SendUrlCard\rwx.SendUrlCard(url=\"https://example.com\", friends=\"张三\", timeout=10)\r参数：\n参数 类型 默认值 描述 url str 必填 链接地址 friends Union[str, List[str]] None 发送对象，可以是单个用户名或用户名列表 timeout int 10 等待时间（秒） 返回值：\n类型：WxResponse 描述：发送结果 打开聊天窗口 ChatWith\rwx.ChatWith(who=\"张三\", exact=False)\r参数：\n参数 类型 默认值 描述 who str 必填 要聊天的对象 exact bool False 搜索好友时是否精确匹配 返回值：无\n获取子窗口实例 GetSubWindow\rchat = wx.GetSubWindow(nickname=\"张三\")\r参数：\n参数 类型 默认值 描述 nickname str 必填 要获取的子窗口的昵称 返回值：\n类型：Chat 描述：子窗口实例 获取所有子窗口实例 GetAllSubWindow\rchats = wx.GetAllSubWindow()\r返回值：\n类型：List[Chat] 描述：所有子窗口实例的列表 添加监听聊天窗口 AddListenChat\r👉监听消息\r使用示例\rdef on_message(msg, chatname): print(f\"收到来自 {chatname} 的消息: {msg.content}\") wx.AddListenChat(nickname=\"张三\", callback=on_message)\r参数：\n参数 类型 默认值 描述 nickname str 必填 要监听的聊天对象 callback Callable[[Message, str], None] 必填 回调函数，参数为(Message对象, Chat对象) 返回值：\n成功时：\n类型：Chat 描述：该监的听子窗口实例 失败时：\n类型：WxResponse 描述：执行结果，成功时包含监听名称 移除监听聊天 RemoveListenChat\rwx.RemoveListenChat(nickname=\"张三\")\r参数：\n参数 类型 默认值 描述 nickname str 必填 要移除的监听聊天对象 返回值：\n类型：WxResponse 描述：执行结果 开始监听 StartListening\rwx.StartListening()\r参数：无\n返回值：无\n停止监听 StopListening\rwx.StopListening()\r参数：\n参数 类型 默认值 描述 remove bool True 是否移出所有子窗口 返回值：无\n保持运行 KeepRunning\r用于防止监听时程序退出\nwx.KeepRunning()\r✨进入朋友圈 Moments\rmoments = wx.Moments(timeout=3)\r参数：\n参数 类型 默认值 描述 timeout int 3 等待时间（秒） 返回值：\n类型：MomentsWnd 描述：朋友圈窗口实例 获取下一个新消息 GetNextNewMessage\rmessages = wx.GetNextNewMessage(filter_mute=False)\r参数：\n参数 类型 默认值 描述 filter_mute bool False 是否过滤掉免打扰消息 返回值：\n类型：Dict[str, List[Message] 描述：消息列表，键为聊天名称，值为消息列表 ✨获取新的好友申请列表 GetNewFriends\rnewfriends = wx.GetNewFriends(acceptable=True)\r参数：\n参数 类型 默认值 描述 acceptable bool True 是否过滤掉已接受的好友申请 返回值：\n类型：List[NewFriendElement] 描述：新的好友申请列表 示例：\nnewfriends = wx.GetNewFriends(acceptable=True) tags = ['标签1', '标签2'] for friend in newfriends: remark = f'备注{friend.name}' friend.Accept(remark=remark, tags=tags) # 接受好友请求，并设置备注和标签\r✨添加新的好友 AddNewFriend\rwx.AddNewFriend(keywords=\"张三\", addmsg=\"我是小明\", remark=\"老张\", tags=[\"同学\"], permission=\"朋友圈\", timeout=5)\r参数：\n参数 类型 默认值 描述 keywords str 必填 搜索关键词，可以是昵称、微信号、手机号等 addmsg str None 添加好友时的附加消息 remark str None 添加好友后的备注 tags List[str] None 添加好友后的标签 permission Literal[‘朋友圈’, ‘仅聊天’] ‘朋友圈’ 添加好友后的权限 timeout int 5 搜索好友的超时时间（秒） 返回值：\n类型：WxResponse 描述：添加好友的结果 切换到聊天页面 SwitchToChat\rwx.SwitchToChat()\r返回值：无\n切换到联系人页面 SwitchToContact\rwx.SwitchToContact()\r返回值：无\n是否在线 IsOnline\rwx.IsOnline()\r返回值：\n类型：bool 获取我的信息 GetMyInfo\r获取自己的微信号等信息\nwx.GetMyInfo()\r返回值：\n类型：Dict[str, str] "},"title":"WeChat类"},"/docs/concepts/":{"data":{"":"","chat#Chat":"","message#Message":"","wechat#WeChat":"","wxparam#WxParam":"Chat\rChat 类代表一个微信聊天窗口实例，提供了与聊天相关的操作方法，用于对微信聊天窗口进行各种操作，后续文档以变量名chat作为该类对象。\nWeChat\rWeChat 类是 wxautox 的主要入口点，它继承自 Chat 类和 Listener 类，代表微信主窗口实例，用于对微信主窗口进行各种操作，后续文档以变量名wx作为该类对象。\n初始化参数\r参数 类型 默认值 描述 nickname str None 微信昵称，用于定位特定的微信窗口 debug bool False 是否开启调试模式 wx = WeChat(nickname=\"张三\")\rMessage\rMessage类代表微信聊天中的消息，分为两个概念：\n消息内容类型（type）：文本消息、图片消息、文件消息、语音消息、卡片消息等等 消息来源类型（attr）：系统消息、时间消息、自己发送的消息、对方发来的消息 # 导入你想要的消息类型 from wxautox.msgs import ( Message, TextMessage, FriendMessage, FriendTextMessage, ... ) # 假设你获取到了一个消息对象 msg: Message = ... # 如果是对方发来的消息，则回复收到 if isinstance(msg, FriendMessage): msg.reply(\"收到\")\rtype↓ attr→ 自己的消息SelfMessage 对方的消息FriendMessage 文本消息TextMessage SelfTextMessage FriendTextMessage 引用消息QuoteMessage SelfQuoteMessage FriendQuoteMessage 语音消息VoiceMessage SelfVoiceMessage FriendVoiceMessage 图片消息ImageMessage SelfImageMessage FriendImageMessage 视频消息VideoMessage SelfVideoMessage FriendVideoMessage 文件消息FileMessage SelfFileMessage FriendFileMessage 位置消息LocationMessage SelfLocationMessage FriendLocationMessage 链接消息LinkMessage SelfLinkMessage FriendLinkMessage 表情消息EmotionMessage SelfEmotionMessage FriendEmotionMessage 合并消息MergeMessage SelfMergeMessage FriendMergeMessage 名片消息PersonalCardMessage SelfPersonalCardMessage FriendPersonalCardMessage 其他消息OtherMessage SelfOtherMessage FriendOtherMessage WxResponse\r该类用于该项目多个方法的返回值\n# 这里假设result为某个方法的WxResponse类型返回值 result: WxResponse = ... # 判断是否成功 if result: data = result['data'] # 成功，获取返回数据，大多数情况下为None else: print(result['message']) # 该方法调用失败，打印错误信息\rWxParam\rENABLE_FILE_LOGGER ( bool ) ：是否启用日志文件，默认True DEFAULT_SAVE_PATH ( str ) ：下载文件/图片默认保存路径，默认为当前工作目录下的wxautox文件下载文件夹 MESSAGE_HASH ( bool ) ：是否启用消息哈希值用于辅助判断消息，开启后会稍微影响性能，默认False DEFAULT_MESSAGE_XBIAS ( int ) ：头像到消息X偏移量，用于消息定位，点击消息等操作，默认51 FORCE_MESSAGE_XBIAS ( bool ) ：是否强制重新自动获取X偏移量，如果设置为True，则每次启动都会重新获取，默认False LISTEN_INTERVAL ( int ) ：监听消息时间间隔，单位秒，默认1 LISTENER_EXCUTOR_WORKERS ( int ) ：监听执行器线程池大小，根据自身需求和设备性能设置，默认4 SEARCH_CHAT_TIMEOUT ( int ) ：搜索聊天对象超时时间，单位秒，默认5 from wxautox import WxParam WxParam.LISTENER_EXCUTOR_WORKERS = 8 ...","wxresponse#WxResponse":""},"title":"三、核心类概念"},"/docs/example/example/":{"data":{"":"","#":"1. 基本使用\rfrom wxautox import WeChat # 初始化微信实例 wx = WeChat() # 发送消息 wx.SendMsg(\"你好\", who=\"张三\") # 获取当前聊天窗口消息 msgs = wx.GetAllMessage() for msg in msgs: print(f\"消息内容: {msg.content}, 消息类型: {msg.type}\")\r2. 监听消息\rfrom wxautox import WeChat from wxautox.msgs import FriendMessage import time wx = WeChat() # 消息处理函数 def on_message(msg, chatname): text = f'[{msg.type} {msg.attr}]{chatname} - {msg.content}' print(text) with open('msgs.txt', 'a', encoding='utf-8') as f: f.write(text + '\\n') if msg.type in ('image', 'video'): print(msg.download()) if isinstance(msg, FriendMessage): time.sleep(len(msg.content)) msg.quote('收到') ...# 其他处理逻辑，配合Message类的各种方法，可以实现各种功能 # 添加监听，监听到的消息用on_message函数进行处理 wx.AddListenChat(nickname=\"张三\", callback=on_message) # ... 程序运行一段时间后 ... # 移除监听 wx.RemoveListenChat(nickname=\"张三\")\r3. 处理好友申请\rfrom wxautox import WeChat wx = WeChat() # 获取新的好友申请 newfriends = wx.GetNewFriends(acceptable=True) # 处理好友申请 tags = ['同学', '技术群'] for friend in newfriends: remark = f'备注_{friend.name}' friend.Accept(remark=remark, tags=tags) # 接受好友请求，并设置备注和标签\r4. 使用打字机模式发送消息\rfrom wxautox import WeChat wx = WeChat() # 普通文本发送 wx.SendTypingText(\"你好，这是一条测试消息\", who=\"张三\") # 使用@功能和换行 wx.SendTypingText(\"各位好：\\n{@张三} 请负责前端部分\\n{@李四} 请负责后端部分\", who=\"项目群\")\r5. 获取多个微信客户端\rfrom wxautox import get_wx_clients # 获取所有微信客户端 clients = get_wx_clients() for client in clients: print(f\"微信客户端: {client}\")"},"title":"五、使用示例"},"/docs/install/":{"data":{"":"","一环境配置#一、环境配置":"","三测试运行#三、测试运行":"\r一、环境配置\r环境 版本 Python 3.9-3.12 OS Windows10+, Windows Server2016+ 微信 3.9.8+（不支持4.0） 二、安装\rpip install wxautox\r激活：\nwxautox -a [激活码]\r三、测试运行\rfrom wxautox import WeChat # 初始化微信实例 wx = WeChat() # 发送消息 wx.SendMsg(\"你好\", who=\"文件传输助手\") # 获取当前聊天窗口消息 msgs = wx.GetAllMessage() for msg in msgs: print('==' * 30) print(f\"{msg.sender}: {msg.content}\")","二安装#二、安装":""},"title":"一、环境配置和安装"},"/docs/start/":{"data":{"":"","快速开始#快速开始":"快速开始\rfrom wxautox import WeChat # 初始化微信实例 wx = WeChat() # 发送消息 wx.SendMsg(\"你好\", who=\"文件传输助手\") # 获取当前聊天窗口消息 msgs = wx.GetAllMessage() for msg in msgs: print('==' * 30) print(f\"{msg.sender}: {msg.content}\")"},"title":"二、快速开始"},"/plus/":{"data":{"":"","#":" sidebar_position: 1 title: 关于plus版本\r关于plus版本该版本为wxauto的plus版本✨wxautox，在保留wxauto所有功能的基础上，完善和提升了用户的体验和性能：\nBUG 修复：完善了并修复了wxauto存在的许多问题。 高效性能：新增多项完善功能，大部分场景用户不再需要移动鼠标。 进阶专属支持：加入plus群，提供plus用户专属支持。 文档介绍\r该文档为wxauto的补充文档，已存在于开源版文档中的内容将不会出现在本文档中，仅提供VIP用户参考。\n该版本完全兼容开源版wxauto，你可以完全保留现有wxauto项目，不需修改任何其他代码。只需将\nfrom wxauto import WeChat\r更换为\nfrom wxautox import WeChat\r即可完成迁移。\n功能对比\r👉点击查看功能对比\r类别 功能 开源版 ✨plus版 消息类 发送文字消息 ✅ ✅ 消息类 发送文件 ✅ ✅ 消息类 发送自定义表情包 ❌ ✅ 消息类 引用消息 ✅ ✅ 消息类 @群好友 ✅ ✅ 消息类 @所有人 ✅ ✅ 消息类 获取消息 ✅ ✅ 消息类 监听消息 ✅ ✅ 消息类 引用时@ ❌ ✅ 消息类 通过消息添加好友 ❌ ✅ 消息类 通过消息获取详情 ❌ ✅ 消息类 获取卡片消息链接 ❌ ✅ 好友管理 获取好友列表 ✅ ✅ 好友管理 发送好友请求 ✅ ✅ 好友管理 接受好友请求 ✅ ✅ 好友管理 修改备注 ❌ ✅ 好友管理 增加标签 ❌ ✅ 群管理 邀请入群 ❌ ✅ 群管理 修改群名 ❌ ✅ 群管理 修改群备注 ❌ ✅ 群管理 修改群公告 ❌ ✅ 群管理 修改我在本群昵称 ❌ ✅ 群管理 消息免打扰 ❌ ✅ 群管理 获取群列表 ❌ ✅ 朋友圈 朋友圈相关 ❌ ✅ 其他 后台模式 ❌ ✅ 其他 BUG修复 ❌ ✅ 获取Plus\r加作者好友，备注plus（左侧二维码），或加群获取对接AI应用demo（右侧二维码）。\n:::info 注意 如果没有备注，不会通过好友请求哦~ :::","title-关于plus版本#sidebar_position: 1\ntitle: 关于plus版本":"","关于plus版本#关于plus版本":""},"title":"✨Plus版本"}}