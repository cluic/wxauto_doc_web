{"/about/":{"data":{"":"","鸣谢#鸣谢":"wxauto 是一个基于 Python-UIAutomation-for-Windows 的微信机器人，通过模拟微信客户端操作实现自动回复、消息转发等功能。\n鸣谢\rPython-UIAutomation-for-Windows "},"title":"关于"},"/agreement/":{"data":{"":"","#":"","隐私政策#隐私政策":"最后更新日期：2025年05月23日\n感谢您使用 wxauto(x)（以下简称“本项目”）。为明确用户责任，特制定本用户协议（以下简称“协议”）。请在使用前仔细阅读并同意以下条款。您使用本项目即视为您已接受并同意遵守本协议。\n使用许可及限制\n1. 合法用途\r用户应仅将本项目用于合法用途，包括但不限于：\n个人学习和研究。\n在不违反适用法律法规及第三方协议（如微信用户协议）的情况下个人使用。\n2. 禁止行为\r用户不得将本项目用于以下用途，包括但不限于：\n不得使用本项目开发、分发或使用任何违反法律法规的工具或服务。\n不得使用本项目开发、分发或使用任何违反第三方平台规则（如微信用户协议）的工具或服务。\n不得使用本项目从事任何危害他人权益、平台安全或公共利益的行为。\n不得将本项目用于商业用途，包括但不限于开发、销售或以任何方式直接或间接获利的行为。\n不得将wxautox的源代码、修改版本或任何与本项目相关的内容发布至公共平台，也不得通过任何形式进行公开传播或分享。\n3. 风险与责任\r用户在使用本项目时，须自行确保其行为的合法性及合规性。 任何因使用本项目而产生的法律风险、责任及后果，由用户自行承担。用户应确保其使用行为不违反任何适用的法律法规及相关协议，且不侵犯第三方的权益。\n隐私政策\r本项目尊重并保护用户隐私，项目使用过程中，不会收集、使用、传输、披露用户的任何数据。PlusV2版本的授权过程仅传输由用户硬件码生成的哈希值与授权服务器进行授权动作，不涉及用户本地数据传输。"},"title":"用户协议与隐私政策"},"/blog/":{"data":{"":"\rRSS 订阅 构建微信自动化应用 由 wxautox 驱动\r简单、安全的微信自动化框架 为构建微信自动化应用而生\r现在开始\r获取Plus"},"title":"博客"},"/deploy/":{"data":{"":"","#":"","远程控制#远程控制":"为了方便各位新用户，免去python的安装和wxauto环境配置过程，朴利科技为我们提供了专属wxauto系统镜像，无需自行准备电脑和配置环境即可直接启动项目。\n超高性价比： 最低4核4G 配置可流畅挂机wxauto+微信，可应对高频场景 按月付费更灵活 单月价格更优惠 专业稳定：专为7×24小时挂机优化 开箱即用：Windows Server 2022 系统预装wxauto所需全套环境、内置防异地检查方法 👉点击购买：4核4G 12/月\r点击跳转\r👉点击购买：4核8G 15/月\r点击跳转\r预装环境清单\r组件类别 包含内容 核心应用 Windows微信官方版（3.9.12.51 wxauto可用） 开发环境 Python环境 + wxauto库 + VSCode开发环境 系统优化 RDP退出不锁屏脚本、系统内存管理软件(memreduct)自动优化已设置 远程管理 VNC、Windows RDP、预装第三方远控软件（ToDesk或向日葵） 部署教程 开箱即用，本地调试好的程序可直接在服务器运行或者打包exe发送到服务器可直接运行 其他云服务器\r腾讯云\r阿里云\rTip\n这几个链接是我的推广链接，如果你不介意的话可以通过我的链接购买，我会有一点点佣金，你不会多付钱，但是可以支持我继续开发与维护。 货比三家哪个便宜买哪个\n内存CPU：没特殊限制，能选winserver的就行 系统：WindowsServer2016、2019、2022版本 Tip\n云服务器最好买你所在城市或临近城市的，因为手机ip与服务器ip所在地不是一个城市有几率触发微信异地登录风控。\n远程控制\r该项目为自动化模拟项目，需要窗口保持活跃（未锁屏）状态方可正常运行。\n有很多远程方案，没有必须是什么，但要保证退出远程控制时不要锁屏，这里提供两个方式：\n远程桌面WindowsRDP（MSTSC）\r将以下windows批处理命令保存为.bat文件，在结束远程时以管理员权限运行，确保不会锁屏：\nfor /f \"skip=1 tokens=3\" %%s in ('query user %USERNAME%') do ( %windir%\\System32\\tscon.exe %%s /dest:console )\rNote\n该方案为热心群友提供\nVNC\r登录服务器，安装RealVNC server，设置登录密码和服务端口，默认为5900端口，但是最好改一下\n登录云服务器服务商控制台，在防火墙打开上一步设置的vnc端口的访问权限\n自己电脑安装RealVNC viewer，输入云服务器ip:端口进行连接，断开连接不会锁屏\n服务器安装微信，部署代码即可运行\n其他商业远程软件\r如向日葵、TeamViewer、ToDesk等，断开连接不会锁屏即可"},"title":"云服务器部署"},"/docs/":{"data":{"":"","wxauto-的主要功能#wxauto 的主要功能":"","交流#交流":"探索以下部分，了解如何使用 wxauto：\n文档中标题前缀为✨标志的，为Plus版本特有方法，开源版无法调用\n什么是 wxauto？\rwxauto 是我在2020年开发的一个基于 UIAutomation 的开源 Python 微信自动化库，最初只是一个简单的脚本，只能获取消息和发送消息，经历了2年多的停滞，期间很多网友留言说需要更多的功能，所以在2023年针对新版微信重新开发了 wxauto，增加了更多的功能，即使 Python 初学者也可以简单上手自动化微信操作。目前已实现很多日常的微信操作的自动化，如自动发送消息、自动添加好友、自动回复、自动获取聊天记录、图片、文件等功能，后续还会根据反馈更新更多功能。\nwxauto 的主要功能\r消息发送：支持发送文字、图片、文件、@群好友、引用消息等功能 聊天记录：可获取好友的聊天记录内容 监听消息：实时获取指定监听好友（群）的新消息 其他定制功能：根据需求定制自动化流程，满足各种特殊需求。 安装和使用\r安装 wxauto 非常简单，在命令行输入以下命令即可：\npip install wxauto\r接下来，可以按照以下步骤进行基本配置和使用：\n引入 wxauto 库：\nfrom wxauto import WeChat\r初始化微信对象：\nwx = WeChat()\r发送消息：\n# 给文件传输助手发送消息 wx.SendMsg('这是通过wxauto发给你的消息！', '文件传输助手')\r就这么简单几步，你就可以开始使用 wxauto 了！\n会封号吗\r不封号。\n该项目基于Windows官方API开发，不涉及任何侵入、破解、抓包微信客户端应用，完全以人操作微信的行为执行操作\n但是如果你有以下行为，即使手动操作也有风控的风险：\n曾用hook类或webhook类微信工具，如dll注入、itchat及其衍生产品 频繁且大量的发送消息、添加好友等，导致风控 高频率发送机器人特征明显的消息，导致被人举报，致使行为风控 扫码手机与电脑客户端不在同一个城市，导致异地风控 低权重账号做太多动作，低权重账号可能包括： 新注册账号 长期未登录或不活跃账号 未实名认证账号 未绑定银行卡账号 曾被官方处罚的账号 … 交流\r有任何问题或建议，欢迎加作者好友，备注wxauto\n作者好友不备注的话，可能不会通过哦~\r加群交流群内可获取AI应用demo","什么是-wxauto#什么是 wxauto？":"","会封号吗#会封号吗":"","安装和使用#安装和使用":""},"title":"wxauto(x)"},"/docs/class/chat/":{"data":{"":"","chat-类属性#Chat 类属性":"","chat-类方法#Chat 类方法":"Chat 类属性\r在了解Chat类的方法之前，我想先介绍一下为什么要做这个类。 wxauto(x)这个项目的原理是模拟人工对微信客户端的操作，拿取到的所有信息都是人眼可见的部分， 所以当我们想监听某个人或群消息的时候，需要把这个人的聊天窗口独立出来，以确保UI元素不会因为微信主窗口切换聊天而丢失， 同时也不需要每来一条信息都切换聊天窗口去获取。 所以，Chat类就是用来创建一个独立的聊天窗口，并获取这个聊天窗口的信息。\n属性 类型 描述 who str 当前子窗口的聊天对象名 chat_type str 聊天窗口类型 聊天窗口类型 chat_type\r获取当前聊天窗口的类型，返回值为字符串，取值范围如下：\nfriend：好友 group：群聊 service：客服 official：公众号 chat_type = chat.chat_type\rChat 类方法\r显示窗口 Show\rchat.Show()\r获取聊天窗口信息 ChatInfo\rinfo = chat.ChatInfo()\r返回值：\n类型：dict 描述：聊天窗口信息 返回值示例： # 好友 {'chat_type': 'friend', 'chat_name': '张三'} # 群聊 {'group_member_count': 500, 'chat_type': 'group', 'chat_name': '工作群'} # 客服 {'company': '@肯德基', 'chat_type': 'service', 'chat_name': '店长xxx'} # 公众号 {'chat_type': 'official', 'chat_name': '肯德基'} ✨@所有人 AtAll\rgroup = '工作群' content = \"\"\" 通知： 下午xxxx xxxx \"\"\" wx.AtAll(content, group)\rmsg (str): 发送的消息\n​ who (str, optional): 发送给谁. Defaults to None.\n​ exact (bool, optional): 是否精确匹配. Defaults to False.\n参数：\n参数 类型 默认值 描述 msg str None 发送的消息 who str None 发送给谁 exact bool False 是否精确匹配 返回值：\n类型：WxResponse 描述：是否发送成功 发送消息 SendMsg\rwx.SendMsg(msg=\"你好\", who=\"张三\", clear=True, at=\"李四\", exact=False)\r参数：\n参数 类型 默认值 描述 msg str 必填 消息内容 who str None 发送对象，不指定则发送给当前聊天对象，当子窗口时，该参数无效 clear bool True 发送后是否清空编辑框 at Union[str, List[str]] None @对象，不指定则不@任何人 exact bool False 搜索who好友时是否精确匹配，当子窗口时，该参数无效 返回值：\n类型：WxResponse 描述：是否发送成功 ✨发送文本消息（打字机模式）SendTypingText\rwx.SendTypingText(msg=\"你好\", who=\"张三\", clear=True, exact=False)\r参数：\n参数 类型 默认值 描述 msg str 必填 要发送的文本消息 who str None 发送对象，不指定则发送给当前聊天对象，当子窗口时，该参数无效 clear bool True 是否清除原本的内容 exact bool False 搜索who好友时是否精确匹配，当子窗口时，该参数无效 返回值：\n类型：WxResponse 描述：是否发送成功 示例：\n# 换行及@功能 wx.SendTypingText('各位下午好\\n{@张三}负责xxx\\n{@李四}负责xxxx', who='工作群')\r发送文件 SendFiles\rwx.SendFiles(filepath=\"C:/文件.txt\", who=\"张三\", exact=False)\r参数：\n参数 类型 默认值 描述 filepath str|list 必填 要复制文件的绝对路径 who str None 发送对象，不指定则发送给当前聊天对象，当子窗口时，该参数无效 exact bool False 搜索who好友时是否精确匹配，当子窗口时，该参数无效 返回值：\n类型：WxResponse 描述：是否发送成功 ✨发送自定义表情 SendEmotion\rwx.SendEmotion(emotion_index=0, who=\"张三\", exact=False)\r参数：\n参数 类型 默认值 描述 emotion_index str 必填 表情索引，从0开始 who str None 发送对象，不指定则发送给当前聊天对象，当子窗口时，该参数无效 exact bool False 搜索who好友时是否精确匹配，当子窗口时，该参数无效 返回值：\n类型：WxResponse 描述：是否发送成功 获取当前聊天窗口的所有消息 GetAllMessage\rmessages = wx.GetAllMessage()\r返回值：\n类型：List[Message] 描述：当前聊天窗口的所有消息 加载当前窗口更多聊天记录 LoadMoreMessage\rwx.LoadMoreMessage()\r返回值：\n类型：WxResponse 描述：是否发送成功 ✨添加群成员 AddGroupMembers\rwx.AddGroupMembers(group=\"技术交流群\", members=[\"张三\", \"李四\"], reason=\"交流技术\")\r参数：\n参数 类型 默认值 描述 group str None 群名 members Union[str, List[str]] None 成员名或成员名列表 reason str None 申请理由，当群主开启验证时需要，不填写则取消申请 返回值：\n类型：WxResponse 描述：是否添加成功 ✨获取当前聊天群成员 GetGroupMembers\rmembers = wx.GetGroupMembers()\r返回值：\n类型：List[str] 描述：当前聊天群成员列表 ✨移除群成员 RemoveGroupMembers\rwx.RemoveGroupMembers(group=\"群名\", members=[\"成员名1\", \"成员名2\"])\r参数：\n参数 类型 默认值 描述 group str None 群名 members str None 成员名 返回值：\n类型：WxResponse 描述：是否移除成功 ✨从群聊中添加好友 AddFriendFromGroup\rindex = 5 # 申请群里索引值为5的成员为好友 remark = \"备注名\" tags = [\"标签1\", \"标签2\"] result = wx.AddFriendFromGroup(index=index, remark=remark, tags=tags) if result: print(\"成功发起申请\") else: print(f\"申请失败：{result['message']}\")\r参数：\n参数 类型 默认值 描述 index int None 群聊索引 who str None 群名，当Chat对象时该参数无效，仅WeChat对象有效 addmsg str None 申请理由，当群主开启验证时需要，不填写则取消申请 remark str None 添加好友后的备注名 tags list None 添加好友后的标签 permission Literal[‘朋友圈’, ‘仅聊天’] ‘仅聊天’ 添加好友后的权限 exact bool False 是否精确匹配群聊名 返回值：\n类型：WxResponse ✨修改好友备注名或标签 ManageFriend\rwx.ManageFriend(remark=\"新备注名\") wx.ManageFriend(tags=[\"标签1\", \"标签2\"])\r参数：\n参数 类型 默认值 描述 remark str None 备注名 tags List[str] None 标签列表 返回值：\n类型：WxResponse 描述：是否成功修改备注名或标签 ✨管理当前群聊 ManageGroup\rwx.ManageGroup(name=\"新群名\") wx.ManageGroup(remark=\"新备注名\") wx.ManageGroup(myname=\"新群昵称\") wx.ManageGroup(notice=\"新群公告\") wx.ManageGroup(quit=True) # 谨慎使用\r参数：\n参数 类型 默认值 描述 name str None 群名称 remark str None 备注名 myname str None 我的群昵称 notice str None 群公告 quit bool False 是否退出群，当该项为True时，其他参数无效 关闭窗口 Close\rwx.Close()\r✨合并转发消息 MergeForward\r👉查看合并转发消息示例\r点击跳转\r参数：\n参数 类型 默认值 描述 targets Union[List[str], str] None 要转发的对象 返回值：\n类型：WxResponse 描述：是否成功转发 ✨获取对话框 GetDialog\rif dialog := wx.GetDialog(): dialog.click_button(\"确定\")\r参数：\n参数 类型 默认值 描述 wait int 3 隐性等待时间 返回值：\n类型：WeChatDialog 描述：对话框对象，如果不存在则返回None ✨移除置顶消息 GetTopMessage\rif top_messages := wx.GetTopMessage(): for top_message in top_messages: print(f\"移除置顶消息: {top_message.content}\") top_message.remove()\r参数：无\n返回值：\n类型：List[TopMsg] "},"title":"Chat类"},"/docs/class/message/":{"data":{"":"","emotionmessage#✨EmotionMessage":"","filemessage#FileMessage":"","friendmessage#FriendMessage":"","humanmessage#HumanMessage":"","imagemessage#ImageMessage":"","linkmessage#✨LinkMessage":"","locationmessage#✨LocationMessage":"","mergemessage#✨MergeMessage":"","message#Message":"","notemessage#✨NoteMessage":"","othermessage#OtherMessage":"消息类中，有两个固定属性：\nattr：消息属性，即消息的来源属性 system：系统消息 time：时间消息 tickle：拍一拍消息 self：自己发送的消息 friend：好友消息 other：其他消息 type：消息类型，即消息的内容属性 text：文本消息 quote：引用消息 voice：语音消息 image：图片消息 video：视频消息 file：文件消息 location：位置消息 link：链接消息 emotion：表情消息 merge：合并转发消息 personal_card：个人名片消息 note: 笔记消息 other：其他消息 而self和friend又可以跟消息类型所组合，所以所有消息类别如下：\n自己发送的消息SelfMessage 对方发来的消息FriendMessage 文本消息TextMessage SelfTextMessage FriendTextMessage 引用消息QuoteMessage SelfQuoteMessage FriendQuoteMessage 语音消息VoiceMessage SelfVoiceMessage FriendVoiceMessage 图片消息ImageMessage SelfImageMessage FriendImageMessage 视频消息VideoMessage SelfVideoMessage FriendVideoMessage 文件消息FileMessage SelfFileMessage FriendFileMessage ✨位置消息LocationMessage SelfLocationMessage FriendLocationMessage ✨链接消息LinkMessage SelfLinkMessage FriendLinkMessage ✨表情消息EmotionMessage SelfEmotionMessage FriendEmotionMessage ✨合并消息MergeMessage SelfMergeMessage FriendMergeMessage ✨名片消息PersonalCardMessage SelfPersonalCardMessage FriendPersonalCardMessage ✨笔记消息NoteMessage SelfNoteMessage FriendNoteMessage 其他消息OtherMessage SelfOtherMessage FriendOtherMessage 简单的使用示例：\nfrom wxautox.msgs import * ... # 省略获取消息对象的过程 # 假设你获取到了一个消息对象 msg = ... # 当消息为好友消息时，回复收到 # 方法一： if msg.attr == 'friend': msg.reply('收到') # 方法二： if isinstance(msg, FriendMessage): msg.reply('收到')\rMessage\r消息基类，所有消息类型都继承自该类\n属性（所有消息类型都包含以下属性）：\n属性名 类型 描述 type str 消息内容类型 attr str 消息来源类型 info Dict 消息的详细信息 id str 消息UI ID（不重复，切换UI后会变） ✨hash str 消息hash值（可能重复，切换UI后不变） sender str 消息发送者 content str 消息内容 chat_info\r获取该消息所属聊天窗口的信息\nchat_info = msg.chat_info()\r返回值：\n类型：dict 描述：聊天窗口信息 返回值示例： # 好友 {'chat_type': 'friend', 'chat_name': '张三'} # 群聊 {'group_member_count': 500, 'chat_type': 'group', 'chat_name': '工作群'} # 客服 {'company': '@肯德基', 'chat_type': 'service', 'chat_name': '店长xxx'} # 公众号 {'chat_type': 'official', 'chat_name': '肯德基'} ✨ get_all_text\r获取消息中所有文本内容\ntext_list = msg.get_all_text()\r返回值：\n类型：List[str] roll_into_view\r将消息滚动到视野内\nmsg.roll_into_view()\rSystemMessage\r系统消息，没有特殊用法\n固定属性：\n属性名 类型 属性值 描述 attr str system 消息属性 TickleMessage\r拍一拍消息，继承自SystemMessage\n固定属性：\n属性名 类型 属性值 描述 attr str tickle 消息属性 特有属性：\n属性 类型 描述 tickle_list str 拍一拍消息列表 TimeMessage\r时间消息\n固定属性：\n属性名 类型 属性值 描述 attr str time 消息属性 特有属性：\n属性 类型 描述 time str 时间 YYYY-MM-DD HH:MM:SS HumanMessage\r人发送的消息，即自己或好友、群友发送的消息\n固定属性：\n属性名 类型 属性值 描述 attr str friend 消息属性 特有属性：\n属性 类型 描述 sender_remark str 群消息中，该消息发送人自己设置的“我在本群的昵称” click\r点击该消息，一般特殊消息才会有作用，比如图片消息、视频消息等\nmsg.click()\rselect_option\r右键该消息，弹出右键菜单，并选择指定选项\nmsg.select_option(\"复制\")\r返回值：\n类型：WxResponse 描述：操作结果 quote\r引用该消息，并回复\nmsg.quote(\"回复内容\")\r参数：\n参数名 类型 默认值 描述 text str 无 引用内容 at Union[List[str], str] 无 @用户列表 timeout int 3 超时时间，单位为秒 返回值：\n类型：WxResponse 描述：操作结果 forward\r转发该消息\nmsg.forward(\"张三\", message=\"转发会议材料给你，请查收\")\r参数：\n参数名 类型 默认值 描述 targets Union[List[str], str] 无 转发对象名称 ✨message str None 要附加的消息（仅✨Plus版本支持该参数） timeout int 3 超时时间，单位为秒 返回值：\n类型：WxResponse 描述：操作结果 ✨tickle\r拍一拍该消息发送人\nmsg.tickle()\r返回值：\n类型：WxResponse 描述：操作结果 ✨delete\r删除该消息\nmsg.delete()\r返回值：\n类型：WxResponse 描述：操作结果 ✨download_head_image\r下载该消息发送人的头像\nmsg.download_head_image()\r返回值：\n类型：Path 描述：下载路径Path对象 FriendMessage\r好友、群友发送的消息，即聊天页面中，左侧人员发送的消息。继承自HumanMessage\n✨sender_info\r获取发送人信息\nmsg.sender_info()\r返回值：\n类型：Dict[str, str] ✨at\r@该消息发送人\nmsg.at('xxxxxx')\r参数：\n参数名 类型 默认值 描述 content str 必填 要发送的内容 quote bool False 是否引用该消息 返回值：\n类型：WxResponse 描述：操作结果 ✨add_friend\r添加该消息的发送人为好友\nmsg.add_friend()\r参数：\n参数名 类型 默认值 描述 addmsg str None 添加好友时的附加消息，默认为None remark str None 添加好友后的备注，默认为None tags list None 添加好友后的标签，默认为None permission Literal[‘朋友圈’, ‘仅聊天’] ‘朋友圈’ 添加好友后的权限，默认为’朋友圈’ timeout int 3 搜索好友的超时时间，默认为3秒 返回值：\n类型：WxResponse 描述：操作结果 ✨multi_select\r👉查看合并转发消息示例\r点击跳转\r多选该消息，仅作合并转发使用，如果不进行合并转发，请勿调用该方法\nmsg.multi_select()\r参数：无\n返回值：无\nSelfMessage\r自己发送的消息，即聊天页面中，右侧自己发送的消息。继承自HumanMessage\n固定属性：\n属性名 类型 属性值 描述 attr str self 消息属性 TextMessage\r文本消息。继承自HumanMessage\n固定属性：\n属性名 类型 属性值 描述 type str text 消息属性 QuoteMessage\r引用消息。继承自HumanMessage\n固定属性：\n属性名 类型 属性值 描述 type str quote 消息属性 特有属性：\n属性名 类型 属性值 描述 quote_content str 引用消息内容 引用消息内容 ✨download_quote_image\r下载引用消息中的图片，返回图片路径\nmsg.download_quote_image()\r参数：\n参数名 类型 默认值 描述 dir_path str None 下载路径，默认为None timeout int 10 超时时间，默认为10秒 返回值： Path: 视频路径，成功时返回该类型\n✨click_quote\r点击引用框体\nmsg.click_quote()\r参数：无\n返回值：无\nImageMessage\r图片消息。继承自HumanMessage\n固定属性：\n属性名 类型 属性值 描述 type str image 消息属性 download\r下载图片，返回图片路径\nmsg.download()\r参数：\n参数名 类型 默认值 描述 dir_path Union[str, Path] None 下载图片的目录，不填则默认WxParam.DEFAULT_SAVE_PATH timeout int 10 下载超时时间 返回值：\nPath: 图片路径，成功时返回该类型 WxResponse: 下载结果，失败时返回该类型 VideoMessage\r视频消息。继承自HumanMessage\n固定属性：\n属性名 类型 属性值 描述 type str video 消息属性 download\r下载视频，返回视频路径\nmsg.download()\r参数：\n参数名 类型 默认值 描述 dir_path Union[str, Path] None 下载视频的目录，不填则默认WxParam.DEFAULT_SAVE_PATH timeout int 10 下载超时时间 返回值：\nPath: 视频路径，成功时返回该类型 WxResponse: 下载结果，失败时返回该类型 VoiceMessage\r语音消息。继承自HumanMessage\n固定属性：\n属性名 类型 属性值 描述 type str voice 消息属性 to_text\r将语音消息转换为文本，返回文本内容\nmsg.to_text()\rFileMessage\r文件消息。继承自HumanMessage\n固定属性：\n属性名 类型 属性值 描述 type str file 消息属性 download\r下载文件，返回文件路径\nmsg.download()\r参数：\n参数名 类型 默认值 描述 dir_path Union[str, Path] None 下载文件的目录，不填则默认WxParam.DEFAULT_SAVE_PATH force_click bool False 是否强制点击文件消息（当自动下载不可用时指定，否则会打开该文件） timeout int 10 下载超时时间 返回值：\nPath: 文件路径，成功时返回该类型 WxResponse: 下载结果，失败时返回该类型 ✨LocationMessage\r位置消息。继承自HumanMessage\n固定属性：\n属性名 类型 属性值 描述 type str location 消息属性 特有属性：\n属性名 类型 属性值 描述 ✨address str 地址信息 该消息卡片的地址信息 ✨LinkMessage\r链接消息。继承自HumanMessage\n固定属性：\n属性名 类型 属性值 描述 type str link 消息属性 ✨get_url\r获取链接地址\nmsg.get_url()\r参数名 类型 默认值 描述 timeout int 10 下载超时时间 返回值：\nstr: 链接地址 ✨EmotionMessage\r表情消息。继承自HumanMessage\n固定属性：\n属性名 类型 属性值 描述 type str emotion 消息属性 ✨MergeMessage\r合并消息。继承自HumanMessage\n固定属性：\n属性名 类型 属性值 描述 type str merge 消息属性 ✨get_messages\r获取合并消息中的所有消息\nmsg.get_messages()\r返回值：\nList[str]: 合并消息中的所有消息 ✨PersonalCardMessage\r名片消息。继承自HumanMessage\n固定属性：\n属性名 类型 属性值 描述 type str personal_card 消息属性 ✨add_friend\r添加好友\nmsg.add_friend()\r参数名 类型 默认值 描述 addmsg str None 添加好友时的附加消息 remark str None 添加好友后的备注 tags List[str] None 添加好友后的标签 permission Literal[‘朋友圈’, ‘仅聊天’] ‘朋友圈’ 添加好友后的权限 timeout int 3 搜索好友的超时时间 返回值：\nWxResponse: 是否添加成功 ✨NoteMessage\r笔记消息。继承自HumanMessage\n固定属性：\n属性名 类型 属性值 描述 type str note 消息属性 ✨get_content\r获取笔记内容\nfrom pathlib import Path note_content_list = msg.get_content() for content in note_content_list: if isintance(content, str): # 文本内容 print(content) elif isintance(content, Path): # 文件路径，文件、视频、图片等 print('文件路径：', content)\r✨save_files\r保存笔记中的文件\nmsg.save_files()\r参数名 类型 默认值 描述 dir_path Union[str, Path] None 保存路径 返回值：\nWxResponse: 是否保存成功，若成功则data为保存的文件路径列表 ✨to_markdown\r将笔记转换为Markdown格式\nmsg.to_markdown()\r参数名 类型 默认值 描述 dir_path Union[str, Path] None 保存路径 返回值：\nPath: markdown文件路径 OtherMessage\r其他暂未支持解析的消息类型","personalcardmessage#✨PersonalCardMessage":"","quotemessage#QuoteMessage":"","selfmessage#SelfMessage":"","systemmessage#SystemMessage":"","textmessage#TextMessage":"","ticklemessage#TickleMessage":"","timemessage#TimeMessage":"","videomessage#VideoMessage":"","voicemessage#VoiceMessage":""},"title":"Message类"},"/docs/class/moment/":{"data":{"":"","moments#Moments":"MomentsWnd\r朋友圈窗口对象，即的是朋友圈的窗口对象，提供对朋友圈窗口的各种操作，如获取朋友圈内容、刷新、关闭等功能。\nfrom wxautox import WeChat wx = WeChat() pyq = wx.Moments() # 打开朋友圈并获取朋友圈窗口对象（如果为None则说明你没开启朋友圈，需要在手机端设置）\rGetMoments\r获取朋友圈内容\n# 获取当前页面的朋友圈内容 moments = pyq.GetMoments() # 通过`next_page`参数获取下一页的朋友圈内容 moments = pyq.GetMoments(next_page=True)\r参数：\n参数 类型 默认值 说明 next_page bool False 是否翻页后再获取 speed1 int 3 翻页时的滚动速度，根据自己的情况进行调整，建议3-10自行调整 speed2 int 1 翻页最后时的速度，避免翻页过多导致遗漏所以一般比speed1慢，建议1-3 返回值：List[Moments]\nRefresh\r刷新朋友圈\npyq.Refresh()\rclose\r关闭朋友圈\npyq.close()\rMoments\r朋友圈内容对象，即的是朋友圈的内容对象，提供对朋友圈的各种操作，如获取朋友圈内容、点赞、评论等功能。\n# 获取朋友圈对象 moments = pyq.GetMoments() # 获取第一条朋友圈 moment = moments[0]\r获取朋友圈内容\r# 获取朋友圈内容 info = moment.info # { # 'type': 'moment', # 类型，分为`朋友圈`和`广告` # 'id': '4236572776458165', # ID # 'sender': '天天鲜花2号客服', # 发送者 # 'content': '客订花束', # 内容，就是朋友圈的文字内容，如果没有文字内容则为空字符串 # 'time': '4分钟前', # 发送时间 # 'img_count': 3, # 图片数量 # 'comments': [], # 评论 # 'addr': '', # 发送位置 # 'likes': [] # 点赞 # } moment.sender # '天天鲜花2号客服' moment.content # '客订花束' moment.time # '4分钟前' # info中所有的键值对都可以通过对象的属性来获取，就不一一列举了 ...\rSaveImages\r保存朋友圈图片\n参数：\n参数 类型 默认值 说明 save_index int | list None 保存图片的索引，可以是一个整数或者一个列表，如果为None则保存所有图片 savepath str None 绝对路径，包括文件名和后缀，例如：“D:/Images/微信图片_xxxxxx.jpg”，如果为None则保存到默认路径 返回值：List[str]，保存的图片的绝对路径列表\n# 获取朋友圈图片 images = moment.SaveImages() # [ # 'D:/Images/微信图片_xxxxxx1.jpg', # 'D:/Images/微信图片_xxxxxx2.jpg', # 'D:/Images/微信图片_xxxxxx3.jpg', # ... # ]\rLike\r点赞朋友圈\n参数：\n参数 类型 默认值 说明 like bool True True点赞，False取消赞 # 点赞 moment.Like() # 取消赞 moment.Like(False)\r返回值：无\nComment\r评论朋友圈\n参数：\n参数 类型 默认值 说明 text str 必填 评论内容 # 评论 moment.Comment('评论内容')\r返回值：无","momentswnd#MomentsWnd":""},"title":"✨朋友圈类"},"/docs/class/other/":{"data":{"":"","#":"WxResponse\r该类用于该项目多个方法的返回值\n# 这里假设result为某个方法的WxResponse类型返回值 result: WxResponse = ... # 判断是否成功 if result: data = result['data'] # 成功，获取返回数据，大多数情况下为None else: print(result['message']) # 该方法调用失败，打印错误信息\rWxParam\r该类用于该项目的一些参数，在获取WeChat实例前，可以通过修改该类的属性来修改默认参数\n属性 类型 默认值 描述 ENABLE_FILE_LOGGER bool True 是否启用日志文件 DEFAULT_SAVE_PATH str ./wxautox 下载文件/图片默认保存路径 ✨MESSAGE_HASH bool False 是否启用消息哈希值用于辅助判断消息，开启后会稍微影响性能 DEFAULT_MESSAGE_XBIAS int 51 头像到消息X偏移量，用于消息定位，点击消息等操作 FORCE_MESSAGE_XBIAS bool False 是否强制重新自动获取X偏移量，如果设置为True，则每次启动都会重新获取，系统设置了分辨率缩放时开启 LISTEN_INTERVAL int 1 监听消息时间间隔，单位秒 ✨LISTENER_EXCUTOR_WORKERS int 4 监听执行器线程池大小，根据自身需求和设备性能设置 SEARCH_CHAT_TIMEOUT int 5 搜索聊天对象超时时间，单位秒 ✨NOTE_LOAD_TIMEOUT int 30 微信笔记加载超时时间，单位秒 示例：\nfrom wxautox import WxParam # 设置8个监听线程 WxParam.LISTENER_EXCUTOR_WORKERS = 8 ...\rNewFriendElement\r属性 类型 描述（以上图为例） name str 对方名（诸葛孔明） msg str 申请信息（wxautox） acceptable bool 是否可接受（True） accept\r同意添加好友\n参数：\n参数名 类型 默认值 说明 remark str None 备注 tags list None 标签 permission str ‘朋友圈’ 朋友圈权限，可选值：‘全部’、‘仅聊天’ ✨delete\r删除好友申请\n参数：无\n✨reply\r回复好友申请\n参数：\n参数名 类型 默认值 说明 text str 必填 回复信息 ✨get_account\r获取申请添加的好友的账号信息\nℹ️\r该方法仅接受好友申请后，已经成为好友，才能获取到对方账号信息\r参数：\n参数名 类型 默认值 说明 wait int 5 等待时间 返回值：str\n✨LoginWnd\r👉查看自动登录、二维码示例\r点击跳转\r该类用于微信登录、获取二维码等操作\nfrom wxautox import LoginWnd wxlogin = LoginWnd(app_path=\"...\")\r参数：\n参数名 类型 默认值 说明 app_path str None 微信客户端路径 属性：无\nlogin\r登录微信\n参数：\n参数名 类型 默认值 说明 timeout int 10 登录超时时间 返回值：WxResponse\nget_qrcode\r获取二维码\n参数：\n参数名 类型 默认值 说明 path str None 二维码图片的保存路径，None即本地目录下的wxauto_qrcode文件夹 返回值：str，二维码图片的路径\nreopen\r重新打开微信，为了避免各种弹窗影响操作，建议调用该方法后再执行login或get_qrcode\n参数：无\n返回值：无\nopen\r启动微信，建议在初始化的时候传入app_path参数，否则可能会启动失败\n参数：无\n返回值：无\nWeChatImage\rfrom wxautox.ui.component import WeChatImage imgwnd = WeChatImage()\r微信图片/视频窗口类，用于处理微信图片或图片窗口的各种操作\nocr\r识别图片中的文字，仅支持图片，不支持视频\n参数：\n参数名 类型 默认值 说明 wait int 10 隐性等待时间 返回值：str，识别到的文字\nsave\r保存图片/视频\n参数：\n参数名 类型 默认值 说明 dir_path str None 保存的目录路径，None即本地路径下自动生成 timeout int 10 保存超时时间 返回值：Path，保存的文件路径\nclose\r关闭图片/视频窗口\n参数：无\n返回值：无\n✨WeChatDialog\r微信对话框对象，用于处理微信对话框的各种操作\nselect_option\r选择对话框中的选项，如“确定”、“取消”等\n参数：无\n返回值：WxResponse对象\nget_all_text\r获取对话框中所有的文字内容\n参数：无\n返回值：str\nclose\r关闭对话框\n参数：无\n返回值：无\n✨get_wx_clients\r获取所有已登录的微信3.9客户端\nfrom wxautox import get_wx_clients # 获取所有微信客户端 clients = get_wx_clients() for client in clients: print(f\"微信客户端: {client}\")\r返回值：List[WeChat]\nWarning\nwxauto项目不支持一切违反官方用户协议的操作，不建议、不支持、不提供微信多开的方法或行为。 但是如果你自行使用其他方法多开微信，wxauto不承担由你自行多开的行为导致的风险，也不保证所有功能的正常调用。\n✨get_wx_logins\rfrom wxautox import get_wx_logins # 获取所有微信客户端 login_windows = get_wx_logins() # 关闭所有登录窗口 for login_window in login_windows: login_window.close() # 关闭\r返回值：List[LoginWnd]\nWarning\nwxauto项目不支持一切违反官方用户协议的操作，不建议、不支持、不提供微信多开的方法或行为。 但是如果你自行使用其他方法多开微信，wxauto不承担由你自行多开的行为导致的风险，也不保证所有功能的正常调用。"},"title":"其他类（方法）"},"/docs/class/session/":{"data":{"":"","searchresultelement#✨SearchResultElement":"Session 类方法\r概念\rSession类表示微信主窗口聊天页左侧的联系人会话列表，即下图绿色框内部分\n... # 此处省略wx对象的初始化 sessionbox = wx.SessionBox\r✨search\r仅用于触发搜索，返回搜索结果，不会进行下一步的动作，可自行处理搜索结果\n示例：\nsearch_result = sessionbox.search('张三') for item in search_result: print(f\"type: {item.type}, text: {item.text}\")\r参数：\n参数 类型 默认值 说明 keywords str False 搜索关键词 force bool False 是否强制等待，避免未搜索到就返回结果 force_wait Union[float, int] 0.5 强制等待时间，秒 返回值：\nList[SearchResultElement]\ngo_top\r回到会话列表顶部\n参数：无\n返回值：无\nroll_up\r向上滚动会话列表\n参数：\n参数 类型 默认值 说明 n int 5 滚动次数，自行调节滚动幅度 返回值：无\nroll_down\r向下滚动会话列表\n参数：\n参数 类型 默认值 说明 n int 5 滚动次数，自行调节滚动幅度 返回值：无\nSessionElement\r属性 类型 描述（以上图为例） name str 会话名（wxauto三群） time str 时间（2025-05-14 14:41） content str 消息内容（[10条]天道酬勤：这..） ismute bool 是否消息免打扰（True） isnew bool 是否有新消息（True） new_count int 新消息数量（10） info Dict[str, Any] 会话信息（包含了上述所有属性的dict） from wxauto import WeChat wx = WeChat() sessions = wx.GetSession() session = sessions[0] # 获取第一个会话\rclick\r点击会话，即切换到这个聊天窗口\n参数：无\n返回值：无\n示例：\nsession.click()\rdouble_click\r双击会话，即将这个聊天窗口独立出去\n参数：无\n返回值：无\n示例：\nsession.double_click()\r✨delete\r删除会话\n⚠️\r请谨慎调用该方法，该方法会删除该会话的所有聊天记录，无法恢复！！\n请谨慎调用该方法，该方法会删除该会话的所有聊天记录，无法恢复！！\n请谨慎调用该方法，该方法会删除该会话的所有聊天记录，无法恢复！！\r参数：无\n返回值：WxResponse\n示例：\nsession.delete()\r✨hide\r隐藏会话\n参数：无\n返回值：WxResponse\n示例：\nsession.hide()\r✨select_option\r选择会话选项，即右键点击会话，然后选择某个选项\n参数：\n参数名 类型 说明 option str 选项名称，例如“置顶”、“标为未读”等 返回值：WxResponse\n✨SearchResultElement\r会话搜索结果对象\n属性 类型 描述 type str 搜索结果对象的UI类型，一般pane是分割线或者标签，不可交互；listitem是搜索结果，可交互 text str 搜索结果，有时候卡可能为空，建议使用get_all_text方法进行完整判断 get_all_text\r获取该结果对象的所有UI文字内容，用于判断是不是你要的搜索结果\n参数：无\n返回值：List[str]\nclick\r点击该搜索对象\n参数：无\n返回值：无\nclose\r关闭搜索窗口，关闭后本次搜索的所有对象均不可再交互\n参数：无\n返回值：无","session-类方法#Session 类方法":"","sessionelement#SessionElement":""},"title":"Session类"},"/docs/class/wechat/":{"data":{"":"","wechat-类方法#WeChat 类方法":"\r🌐\r提示：\nWeChat 类继承了 Chat类 的所有方法，有关聊天框内的操作，请参考 Chat类 的文档。\rWeChat 类方法\r概念\r为确保您可以理解该文档的一些内容，这里先简单介绍一下 wxauto(x) 的设计思路，如下图所示，wxauto(x) 将微信窗口拆解为三部分：\n导航栏（NavigationBox）：下图蓝色框内部分 会话列表（SessionBox）：下图绿色框内部分 会话列表项（SessionElement）：会话列表中每一个会话的元素，如好友、群聊、公众号等 聊天框（Chat）：下图红色框内部分 初始化参数\r参数 类型 默认值 描述 nickname str None 微信昵称，用于定位特定的微信窗口 debug bool False 是否开启调试模式 from wxautox import WeChat wx = WeChat()\r保持程序运行 KeepRunning\r由于wxautox使用守护线程来监听消息，当程序仅用于监听模式时，主线程会退出，因此需要调用此方法来保持程序运行\nfrom wxautox import WeChat wx = WeChat() wx.AddListenChat('张三', callback=lambda msg, chat: ...) # 保持程序运行，确保正常监听 wx.KeepRunning()\r获取当前会话列表 GetSession\rsessions = wx.GetSession() for session in sessions: print(session.info)\r返回值：\n类型：List[SessionElement] 描述：当前会话列表 ✨发送链接卡片 SendUrlCard\rwx.SendUrlCard(url=\"https://example.com\", friends=\"张三\", timeout=10)\r参数：\n参数 类型 默认值 描述 url str 必填 链接地址 friends Union[str, List[str]] None 发送对象，可以是单个用户名或用户名列表 timeout int 10 等待时间（秒） 返回值：\n类型：WxResponse 描述：发送结果 打开聊天窗口 ChatWith\rwx.ChatWith(who=\"张三\", exact=False)\r参数：\n参数 类型 默认值 描述 who str 必填 要聊天的对象 exact bool False 搜索好友时是否精确匹配 返回值：无\n获取子窗口实例 GetSubWindow\rchat = wx.GetSubWindow(nickname=\"张三\")\r参数：\n参数 类型 默认值 描述 nickname str 必填 要获取的子窗口的昵称 返回值：\n类型：Chat 描述：子窗口实例 获取所有子窗口实例 GetAllSubWindow\rchats = wx.GetAllSubWindow()\r返回值：\n类型：List[Chat] 描述：所有子窗口实例的列表 添加监听聊天窗口 AddListenChat\r👉查看监听消息示例\r点击跳转\rdef on_message(msg, chat): print(f\"收到来自 {chat} 的消息: {msg.content}\") wx.AddListenChat(nickname=\"张三\", callback=on_message)\r参数：\n参数 类型 默认值 描述 nickname str 必填 要监听的聊天对象 callback Callable[[Message, Chat], None] 必填 回调函数，参数为(Message对象, Chat对象) 返回值：\n成功时：\n类型：Chat 描述：该监的听子窗口实例 失败时：\n类型：WxResponse 描述：执行结果，成功时包含监听名称 移除监听聊天 RemoveListenChat\rwx.RemoveListenChat(nickname=\"张三\")\r参数：\n参数 类型 默认值 描述 nickname str 必填 要移除的监听聊天对象 返回值：\n类型：WxResponse 描述：执行结果 开始监听 StartListening\rwx.StartListening()\r参数：无\n返回值：无\n停止监听 StopListening\rwx.StopListening()\r参数：\n参数 类型 默认值 描述 remove bool True 是否移出所有子窗口 返回值：无\n✨进入朋友圈 Moments\rmoments = wx.Moments(timeout=3)\r参数：\n参数 类型 默认值 描述 timeout int 3 等待时间（秒） 返回值：\n类型：MomentsWnd 描述：朋友圈窗口实例 获取下一个新消息 GetNextNewMessage\rmessages = wx.GetNextNewMessage(filter_mute=False)\r参数：\n参数 类型 默认值 描述 filter_mute bool False 是否过滤掉免打扰消息 返回值：\n类型：Dict[str, List[Message] 描述：消息列表，键为聊天名称，值为消息列表 示例： {'chat_name': 'wxauto交流', 'chat_type': 'group', 'msg': [ \u003cwxautox - TimeMessage(2025年5月2...) at 0x227379555d0\u003e, \u003cwxautox - FriendImageMessage([图片]) at 0x2273795ca10\u003e, \u003cwxautox - FriendTextMessage(/[微笑]) at 0x22737967c50\u003e, \u003cwxautox - FriendTextMessage(你点击发送会自动...) at 0x227366c4f50\u003e, ... ] }\r✨获取好友列表 GetFriendDetails\r# 获取前10个好友详情信息 messages = wx.GetFriendDetails(n=10)\r参数：\n参数 类型 默认值 描述 n int None 获取前n个好友详情信息 tag str None 从指定拼音首字母开始 timeout int 0xFFFFF 获取超时时间（秒） 返回值：\n类型：List[dict] 描述：好友详情信息列表 Warning\n该方法运行时间较长，约0.5~1秒一个好友的速度，好友多的话可将n设置为一个较小的值，先测试一下 如果遇到企业微信的好友且为已离职状态，可能导致微信卡死，需重启（此为微信客户端BUG） 该方法未经过大量测试，可能存在未知问题，如有问题请微信群内反馈 ✨获取新的好友申请列表 GetNewFriends\r👉查看处理好友申请示例\r点击跳转\rnewfriends = wx.GetNewFriends(acceptable=True)\r参数：\n参数 类型 默认值 描述 acceptable bool True 是否过滤掉已接受的好友申请 返回值：\n类型：List[NewFriendElement] 描述：新的好友申请列表 示例：\nnewfriends = wx.GetNewFriends(acceptable=True) tags = ['标签1', '标签2'] for friend in newfriends: remark = f'备注{friend.name}' friend.accept(remark=remark, tags=tags) # 接受好友请求，并设置备注和标签\r✨添加新的好友 AddNewFriend\rwx.AddNewFriend(keywords=\"张三\", addmsg=\"我是小明\", remark=\"老张\", tags=[\"同学\"], permission=\"朋友圈\", timeout=5)\r参数：\n参数 类型 默认值 描述 keywords str 必填 搜索关键词，可以是昵称、微信号、手机号等 addmsg str None 添加好友时的附加消息 remark str None 添加好友后的备注 tags List[str] None 添加好友后的标签 permission Literal[‘朋友圈’, ‘仅聊天’] ‘朋友圈’ 添加好友后的权限 timeout int 5 搜索好友的超时时间（秒） 返回值：\n类型：WxResponse 描述：添加好友的结果 ✨获取最近群聊名称列表 GetAllRecentGroups\rgroups = wx.GetAllRecentGroups() if groups: print(groups) else: print('获取失败')\r返回值：\n类型：WxResponse | List[str]: 失败时返回WxResponse，成功时返回所有最近群聊列表 切换到聊天页面 SwitchToChat\rwx.SwitchToChat()\r返回值：无\n切换到联系人页面 SwitchToContact\rwx.SwitchToContact()\r返回值：无\n✨是否在线 IsOnline\rwx.IsOnline()\r返回值：\n类型：bool ✨获取我的信息 GetMyInfo\r获取自己的微信号等信息\nwx.GetMyInfo()\r返回值：\n类型：Dict[str, str] ✨获取通讯录群聊列表 GetContactGroups\r获取通讯录中的群聊列表\nwx.GetContactGroups()\r参数：\nNote\n自动化操作个体差异较大，根据实际情况调整以下参数，速度不合适可能导致漏掉部分群聊\n参数 类型 默认值 描述 speed int 1 滚动速度 interval float 0.1 滚动时间间隔 返回值：\n类型：List[str] "},"title":"WeChat类"},"/docs/concepts/":{"data":{"":"","chat#Chat":"","message#Message":"","wechat#WeChat":"","wxparam#WxParam":"Chat\r👉查看Chat类文档\r点击跳转\rChat 类代表一个微信聊天窗口实例，提供了与聊天相关的操作方法，用于对微信聊天窗口进行各种操作，后续文档以变量名chat作为该类对象。\nWeChat\r👉查看WeChat类文档\r点击跳转\rWeChat 类是本项目的主要入口点，它继承自 Chat 类，代表微信主窗口实例，用于对微信主窗口进行各种操作，后续文档以变量名wx作为该类对象。\n初始化参数\r参数 类型 默认值 描述 nickname str None 微信昵称，用于定位特定的微信窗口 debug bool False 是否开启调试模式 wx = WeChat(nickname=\"张三\")\rMessage\r👉查看Message类文档\r点击跳转\rMessage类代表微信聊天中的消息，分为两个概念：\n消息内容类型（type）：文本消息、图片消息、文件消息、语音消息、卡片消息等等 消息来源类型（attr）：系统消息、时间消息、自己发送的消息、对方发来的消息 # 导入你想要的消息类型 from wxautox.msgs import ( TextMessage, FriendMessage, FriendTextMessage, ... ) # 假设你获取到了一个消息对象 msg: Message = ... # 如果是对方发来的消息，则回复收到 if isinstance(msg, FriendMessage): msg.reply(\"收到\")\rtype↓ attr→ 自己的消息SelfMessage 对方的消息FriendMessage 文本消息TextMessage SelfTextMessage FriendTextMessage 引用消息QuoteMessage SelfQuoteMessage FriendQuoteMessage 语音消息VoiceMessage SelfVoiceMessage FriendVoiceMessage 图片消息ImageMessage SelfImageMessage FriendImageMessage 视频消息VideoMessage SelfVideoMessage FriendVideoMessage 文件消息FileMessage SelfFileMessage FriendFileMessage 位置消息LocationMessage SelfLocationMessage FriendLocationMessage 链接消息LinkMessage SelfLinkMessage FriendLinkMessage 表情消息EmotionMessage SelfEmotionMessage FriendEmotionMessage 合并消息MergeMessage SelfMergeMessage FriendMergeMessage 名片消息PersonalCardMessage SelfPersonalCardMessage FriendPersonalCardMessage 其他消息OtherMessage SelfOtherMessage FriendOtherMessage WxResponse\r该类用于该项目多个方法的返回值\n# 这里假设result为某个方法的WxResponse类型返回值 result: WxResponse = ... # 判断是否成功 if result: data = result['data'] # 成功，获取返回数据，大多数情况下为None else: print(result['message']) # 该方法调用失败，打印错误信息\rWxParam\rENABLE_FILE_LOGGER ( bool ) ：是否启用日志文件，默认True DEFAULT_SAVE_PATH ( str ) ：下载文件/图片默认保存路径，默认为当前工作目录下的wxautox文件下载文件夹 ✨MESSAGE_HASH ( bool ) ：是否启用消息哈希值用于辅助判断消息，开启后会稍微影响性能，默认False DEFAULT_MESSAGE_XBIAS ( int ) ：头像到消息X偏移量，用于消息定位，点击消息等操作，默认51 FORCE_MESSAGE_XBIAS ( bool ) ：是否强制重新自动获取X偏移量，如果设置为True，则每次启动都会重新获取，默认False LISTEN_INTERVAL ( int ) ：监听消息时间间隔，单位秒，默认1 ✨LISTENER_EXCUTOR_WORKERS ( int ) ：监听执行器线程池大小，根据自身需求和设备性能设置，默认4 SEARCH_CHAT_TIMEOUT ( int ) ：搜索聊天对象超时时间，单位秒，默认5 from wxautox import WxParam WxParam.LISTENER_EXCUTOR_WORKERS = 8 ...","wxresponse#WxResponse":""},"title":"三、核心类概念"},"/docs/example/":{"data":{"":"","#":"1. 基本使用\rfrom wxautox import WeChat # 初始化微信实例 wx = WeChat() # 发送消息 wx.SendMsg(\"你好\", who=\"张三\") # 获取当前聊天窗口消息 msgs = wx.GetAllMessage() for msg in msgs: print(f\"消息内容: {msg.content}, 消息类型: {msg.type}\")\r2. 监听消息\rfrom wxautox import WeChat from wxautox.msgs import FriendMessage import time wx = WeChat() # 消息处理函数 def on_message(msg, chat): # 示例1：将消息记录到本地文件 with open('msgs.txt', 'a', encoding='utf-8') as f: f.write(msg.content + '\\n') # 示例2：自动下载图片和视频 if msg.type in ('image', 'video'): print(msg.download()) # 示例3：自动回复收到 if isinstance(msg, FriendMessage): time.sleep(len(msg.content)) msg.quote('收到') ...# 其他处理逻辑，配合Message类的各种方法，可以实现各种功能 # 添加监听，监听到的消息用on_message函数进行处理 wx.AddListenChat(nickname=\"张三\", callback=on_message) # 保持程序运行 wx.KeepRunning()\r# ... 程序运行一段时间后 ... # 移除监听 wx.RemoveListenChat(nickname=\"张三\")\r3. 处理好友申请\rfrom wxautox import WeChat wx = WeChat() # 获取新的好友申请 newfriends = wx.GetNewFriends(acceptable=True) # 处理好友申请 tags = ['同学', '技术群'] for friend in newfriends: remark = f'备注_{friend.name}' friend.accept(remark=remark, tags=tags) # 接受好友请求，并设置备注和标签\r4. 使用打字机模式发送消息\rfrom wxautox import WeChat wx = WeChat() # 普通文本发送 wx.SendTypingText(\"你好，这是一条测试消息\", who=\"张三\") # 使用@功能和换行 wx.SendTypingText(\"各位好：\\n{@张三} 请负责前端部分\\n{@李四} 请负责后端部分\", who=\"项目群\")\r5. 获取多个微信客户端/登录窗口\r5.1 获取多个微信客户端\rfrom wxautox import get_wx_clients # 获取所有微信客户端 clients = get_wx_clients() for client in clients: print(f\"微信客户端: {client}\")\r5.2 获取多个登录窗口\rfrom wxautox import get_wx_logins # 获取所有微信客户端 login_windows = get_wx_logins() # 关闭所有登录窗口 for login_window in login_windows: login_window.close() # 关闭\r6. 自动登录\rℹ️\r仅可自动登录的微信有效\rfrom wxautox import LoginWnd wxpath = \"D:/path/to/WeChat.exe\" # 创建登录窗口 loginwnd = LoginWnd(wxpath) # 登录微信 loginwnd.login()\r7. 获取登录二维码\rfrom wxautox import LoginWnd wxpath = \"D:/path/to/WeChat.exe\" # 创建登录窗口 loginwnd = LoginWnd(wxpath) # 获取登录二维码图片路径 qrcode_path = loginwnd.get_qrcode() print(qrcode)\r8. 合并转发消息\rfrom wxautox import WeChat from wxautox.msgs import HumanMessage wx = WeChat() # 打开指定聊天窗口 wx.ChatWith(\"工作群\") # 获取消息列表 msgs = wx.GetAllMessage() # 多选最后五条消息 n = 0 for msg in msgs[::-1]: if n \u003e= 5: break if isinstance(msg, HumanMessage): n += 1 msg.multi_select() # 执行合并转发 targets = [ '张三', '李四 ] wx.MergeForward(targets)"},"title":"五、使用示例"},"/docs/install/":{"data":{"":"","一环境配置#一、环境配置":"","三测试运行#三、测试运行":"一、环境配置\r环境 版本 Python 3.9-3.12 OS Windows10+, Windows Server2016+ 微信 3.9.8+（不支持4.0） 二、安装\r云部署\n本项目已制作了预配置镜像，适合希望快速运行项目的用户，无需手动配置环境。 查看详情 ➔\n1. 开源版\rpip install wxauto\r2. ✨Plus版\rpip install wxautox # 或指定python版本安装： py -3.12 -m pip install wxautox\r注意\n仅支持 Python3.9 至 3.12\n激活：\nwxautox -a 激活码\r三、测试运行\rfrom wxauto import WeChat # 开源版 # from wxautox import WeChat # ✨Plus版 # 初始化微信实例 wx = WeChat() # 发送消息 wx.SendMsg(\"你好\", who=\"文件传输助手\") # 获取当前聊天窗口消息 msgs = wx.GetAllMessage() for msg in msgs: print('==' * 30) print(f\"{msg.sender}: {msg.content}\")\rSuccess\n✅ 如果测试运行成功，恭喜您，环境配置完成！","二安装#二、安装":""},"title":"一、环境配置和安装"},"/docs/issues/":{"data":{"":"","plus版本后台模式是什么#Plus版本后台模式是什么":"","不同获取消息的方法有什么区别#不同获取消息的方法有什么区别":"","为什么会掉线#为什么会掉线":"","为什么安装成功但是无法导入#为什么安装成功但是无法导入":"","会封号吗#会封号吗":"","会持续更新吗#会持续更新吗":"","可以最小化吗#可以最小化吗":"不同获取消息的方法有什么区别\rwxauto中，有以下获取消息的方法，除GetAllMessage之外，其余方法均用于获取新消息\n方法 说明 GetAllMessage 获取当前聊天页面中已加载的消息 GetNextNewMessage 获取微信主窗口中，其中一个未设置消息免打扰窗口的新消息 AddListenMessage 获取监听模式下聊天窗口的新消息 监听模式\rAddListenMessage\n调用AddListenMessage方法将目标聊天窗口独立出去加入监听列表，获取新消息，并触发回调函数来处理每一条消息\n优点\r准确 读取速度快 缺点\r数量限制，最多设置40个监听对象 全局模式\rGetNextNewMessage\n获取所有微信主窗口中，未被设置为消息免打扰的窗口中的新消息\n优点\r没有数量限制，无差别获取所有窗口新消息 缺点\r必须进行UI操作，速度可能相较监听模式慢些\n该方法原理是获取会话列表中，聊天对象头像上的未读消息角标数字来判断新消息数，然后切换到该聊天窗口，获取新消息\n为什么会掉线\r掉线是微信3.9.9及以后的版本中加入的机制，客户端频繁操作导致的\nplus版本会掉线吗\r会，手动操作频繁也会掉线，是微信客户端的机制\n如何规避\r加延迟时间 用3.9.8版本客户端 plus版本提供自动登录、获取二维码操作 会封号吗\r该项目基于Windows官方API开发，不涉及任何侵入、破解、抓包微信客户端应用，完全以人操作微信的行为执行操作\n但是如果你有以下行为，即使手动操作也有风控的风险：\n曾用hook类或webhook类微信工具，如dll注入、itchat及其衍生产品 频繁且大量的发送消息、添加好友等，导致风控 高频率发送机器人特征明显的消息，导致被人举报，致使行为风控 扫码手机与电脑客户端不在同一个城市，导致异地风控 低权重账号做太多动作，低权重账号可能包括： 新注册账号 长期未登录或不活跃账号 未实名认证账号 未绑定银行卡账号 曾被官方处罚的账号 … 掉线怎么办\r掉线是微信客户端近期新增的安全机制，主要发生在微信号在陌生电脑设备或云服务器登录后触发，不会涉及封号，没有完美解决方案，以下提供两个思路：\n微信号在同一台电脑养至可快速登录，几乎不会掉线，再进行wxauto托管 plus版本提供掉线检测、二维码获取、自动登录等方法（被踢下线无法自动登录，需扫码） 支持Linux/Mac吗\r不支持，基于windows官方API开发，只支持windows系统\nPlus版本后台模式是什么\r后台模式即不依赖鼠标移动，绝大部分场景无需将微信调到前台窗口即可进行操作，但是有些操作必须要微信在前台才可以操作成功，例如获取发送者详情信息等；\n大部分场景下：\n不抢占鼠标 执行速度快 窗口不必在桌面顶部也能操作 ℹ️\r因为原理上还是ui自动化操作，所以某些个别场景可能需要激活微信窗口才可以操作\r是否支持微信多开\rwxauto项目不支持一切违反官方用户协议的操作，不建议、不支持、不提供微信多开的方法或行为。\n但是如果你自行使用其他方法多开微信，plus版本可用WeChat(nickname='xxx')来区分，但wxauto不承担由你自行多开的行为导致的风险，也不保证所有功能的正常调用。\n为什么安装成功但是无法导入\r检查下安装wxautox的环境与你运行环境是否同一个python环境。\nPyCharm默认会给你的项目创建一个虚拟环境，需要在虚拟环境中安装才可以调用\n如果不清楚如何使用虚拟环境安装，可问 AI “怎么用pycharm的虚拟环境安装本地离线whl包”\n支持企业微信吗\r不支持。法律风险较高，影响腾讯收入，严抓\n如果你的企业开启了在个人微信中接受企业消息的功能，可以在个人微信手动将企业微信群拖出来使用wxauto监听模式进行操作\n提示\r该项目为模拟操作，即模拟用户鼠标键盘操作微信客户端的行为，系统、网络、硬件等个体差异较大，\n有什么限制\r不可以发布到公共平台 不可以做违法的事情 个人或内部使用，不允许商业软件厂商进行集成 会持续更新吗\r订阅期为1年，订阅期内更新免费，订阅过期后不提供更新服务，已获取的版本仍可继续使用\n⚠️\r由于发现有倒卖、商业分发plus版本安装包或功能，不排除后续更新会增加设备限制等可能\r可以最小化吗\r可以但是不建议。\nwxauto项目本身是ui自动化，最小化会导致窗口ui绘制更新慢，自动化效率低","掉线怎么办#掉线怎么办":"","提示#提示":"","支持linuxmac吗#支持Linux/Mac吗":"","支持企业微信吗#支持企业微信吗":"","是否支持微信多开#是否支持微信多开":"","有什么限制#有什么限制":""},"title":"六、常见问题"},"/docs/start/":{"data":{"":"","快速开始#快速开始":"快速开始\r获取微信实例\rfrom wxauto import WeChat # 初始化微信实例 wx = WeChat()\r发送消息\r# 发送消息 wx.SendMsg(\"你好\", who=\"文件传输助手\")\r获取当前聊天窗口消息\r# 获取当前聊天窗口消息 msgs = wx.GetAllMessage() for msg in msgs: print('==' * 30) print(f\"{msg.sender}: {msg.content}\")\rSuccess\n✅ 恭喜，你已经成功进行了自动化操作，接下来你可以继续探索更多功能。"},"title":"二、快速开始"},"/plus/":{"data":{"关于plus版本#关于plus版本":"","功能对比#功能对比":"","安装#安装":"","常见问题#常见问题":"\n关于plus版本该版本为wxauto的plus版本✨wxautox，在保留wxauto所有功能的基础上，完善和提升了用户的体验和性能：\nBUG 修复：完善了并修复了wxauto存在的许多问题。 高效性能：新增多项完善功能，大部分场景用户不再需要移动鼠标。 进阶专属支持：加入plus群，提供plus用户专属支持。 安装\rℹ️\r文档中标题前缀为✨标志的，为Plus版本特有方法，开源版无法调用\rpip install wxautox\r激活：\nwxautox -a [激活码]\r即可完成迁移。\n功能对比\r类别 功能 开源版 ✨plus版 消息类 发送文字消息 ✅ ✅ 消息类 发送文件 ✅ ✅ 消息类 发送自定义表情包 ❌ ✅ 消息类 引用消息 ✅ ✅ 消息类 @群好友 ✅ ✅ 消息类 @所有人 ❌ ✅ 消息类 合并转发 ❌ ✅ 消息类 获取消息 ✅ ✅ 消息类 监听消息 ✅ ✅ 消息类 引用时@ ❌ ✅ 消息类 通过消息添加好友 ❌ ✅ 消息类 通过消息获取详情 ❌ ✅ 消息类 获取卡片消息链接 ❌ ✅ 好友管理 获取好友列表 ❌ ✅ 好友管理 发送好友请求 ❌ ✅ 好友管理 接受好友请求 ❌ ✅ 好友管理 修改备注 ❌ ✅ 好友管理 增加标签 ❌ ✅ 群管理 邀请入群 ❌ ✅ 群管理 修改群名 ❌ ✅ 群管理 修改群备注 ❌ ✅ 群管理 修改群公告 ❌ ✅ 群管理 修改我在本群昵称 ❌ ✅ 群管理 消息免打扰 ❌ ✅ 群管理 获取群列表 ❌ ✅ 朋友圈 获取朋友圈内容 ❌ ✅ 朋友圈 下载朋友圈图片 ❌ ✅ 朋友圈 点赞朋友圈 ❌ ✅ 朋友圈 评论朋友圈 ❌ ✅ 其他 后台模式 ❌ ✅ 其他 BUG修复 ✅ ✅ 获取Plus\r作者好友备注plus，不备注可能不会通过\r作者好友（备用）第一个频繁时可加这个\r加群交流扫码加群\r常见问题\r有什么限制\r不可以发布到公共平台 不可以做违法的事情 个人或内部使用，不允许商业软件厂商进行集成 会持续更新吗\r订阅期为1年，订阅期内更新免费，订阅过期后不提供更新服务，已获取的版本仍可继续使用\n⚠️\r由于发现有倒卖、商业分发plus版本安装包或功能，不排除后续更新会增加设备限制等可能\r可以最小化吗\r可以但是不建议。\nwxauto项目本身是ui自动化，最小化会导致窗口ui绘制更新慢，自动化效率低\nPlus版本后台模式是什么\r后台模式即不依赖鼠标移动，绝大部分场景无需将微信调到前台窗口即可进行操作，但是有些操作必须要微信在前台才可以操作成功，例如获取发送者详情信息等；\n大部分场景下：\n不抢占鼠标 执行速度快 窗口不必在桌面顶部也能操作 ℹ️\r因为原理上还是ui自动化操作，所以某些个别场景可能需要激活微信窗口才可以操作","获取plus#获取Plus":""},"title":"✨Plus版本"},"/showcase/":{"data":{"":"\rwxauto(x) 相关衍生项目，由用户开发。\rWXAUTO-HTTP-APIwxauto Restful API 管理应用\rWXAUTO-MGTwxauto应用管理，支持Dify\rwxauto(x)UI面板基于Flask框架+html+css+js的UI面板\rKouriChat在虚拟与现实交织处，给予永恒的温柔羁绊\rWeChatBot_WXAUTO_SEAI大语言模型接入微信实现角色扮演自动聊天的聊天机器人，支持多种功能\r微信群聊总结助手一个基于人工智能的微信群聊消息总结工具，支持多种AI服务，可以自动提取群聊重点内容并生成结构化总结。\r其他优秀项目可联系添加"},"title":"相关项目"},"/update/wxauto/":{"data":{"v39110#v39.1.10":"","v39111#v39.1.11":"","v39112#v39.1.12":"","v39113#v39.1.13":"","v39114#v39.1.14":"","v3915#v39.1.5":"更新日志v39.1.14\r修复折叠群聊导致无法正常运行的问题 v39.1.13\rChat类增加chat_type属性 增加GetMessageById，以为后续适配wxauto_restful_api 修复特定情况下时间消息解析为other的问题 修复客服微信session内容解析错误的问题 v39.1.12\r修复ENABLE_FILE_LOGGER参数无效的问题 优化GetNextNewMessage方法 为确保兼容分辨率缩放，将FORCE_MESSAGE_XBIAS默认为True v39.1.11\r修复引用消息解析为Other的问题 v39.1.10\r修复39.1.9导致的发送消息的bug v39.1.9\r修复发送消息未找到指定好友时错误发送的问题 修复企微群获取ChatInfo错误的问题 修复打包exe某些情况下无法运行的问题 v39.1.8\r修复语音消息to_text方法报错的问题 修复GetNextNewMessage方法报错的问题 v39.1.7\r修复无法解析文件消息的问题 v39.1.6\r修复获取子窗口报错的问题 v39.1.5\r修复@报错的问题 ","v3916#v39.1.6":"","v3917#v39.1.7":"","v3918#v39.1.8":"","v3919#v39.1.9":"","更新日志#更新日志":""},"title":"开源版"},"/update/wxautox/":{"data":{"v39131#v39.1.31":"更新日志v39.1.38\rdialog对象增加get_all_text方法，以方便获取对话框内容 优化转发消息选择联系人优先精准匹配 转发消息选择联系人时，可发送附加信息 增加get_wx_logins方法，获取所有登录窗口对象 优化搜索切换联系人，增加分步搜索 GetSesion方法不再获取未显示的会话 修复当前页面没有任何聊天消息时，无法触发新消息判断的问题 v39.1.37\r修复session对象双击无效问题、选择菜单失败问题 修复特定情况下时间消息解析为other的问题 v39.1.36\r为确保兼容分辨率缩放，将FORCE_MESSAGE_XBIAS默认为True 优化GetNextNewMessage方法 优化GetMyInfo方法 v39.1.35\r修复初始化时当微信窗口没有聊天页面时，GetNextNewMessage方法报错问题 v39.1.34\r优化消息对象下载图片、视频 修复朋友圈下载图片报错问题 修复删除消息偶尔报错问题 v39.1.33\r修复SendFiles方法发送文件/图片会多次执行的BUG v39.1.32\r增加移除群置顶消息的方法GetTopMessage 修复ChatInfo的BUG 修复朋友圈下载图片偶尔为空的BUG 优化GetNextNewMessage方法 优化SendFiles方法 优化AddFriendFromGroup方法 QuoteMessage增加click_quote方法，用于点击被引用框体 v39.1.31\r增加GetContactGroups方法，获取通讯录群聊列表 增加GetDialog方法，获取对话框对象，用于某些自定义操作 WxParam增加NOTE_LOAD_TIMEOUT属性，用于设置微信笔记加载超时时间 优化申请好友对话框判断 优化支持IDE方法参数提示和docstring的正确显示 ","v39132#v39.1.32":"","v39133#v39.1.33":"","v39134#v39.1.34":"","v39135#v39.1.35":"","v39136#v39.1.36":"","v39137#v39.1.37":"","v39138#v39.1.38":"","更新日志#更新日志":""},"title":"Plus版✨"}}